var erroreslexicos=[];
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var myGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,19],$V4=[1,24],$V5=[1,23],$V6=[1,25],$V7=[1,27],$V8=[1,26],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[5,18,22,23,25,32,37,39,42,43,44,45,46,50,51,52,87,88,89,90,91,92],$Vj=[2,69],$Vk=[1,52],$Vl=[1,65],$Vm=[1,64],$Vn=[1,62],$Vo=[1,63],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[18,28,31,54],$VD=[1,89],$VE=[1,107],$VF=[1,106],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,117],$VQ=[1,118],$VR=[1,119],$VS=[1,120],$VT=[20,28,29,35,55,58,60,61,62,63,64,65,66,67,68,69,70,71,72,79],$VU=[2,27],$VV=[28,35],$VW=[20,28,29,35,55,71,72,79],$VX=[20,28,29,35,55,58,60,65,66,67,68,69,70,71,72,79],$VY=[20,28,29,35,55,65,66,67,68,69,70,71,72,79],$VZ=[20,28,29,35,55,71,79],$V_=[1,226],$V$=[35,55],$V01=[32,42,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"funciones":8,"metodos":9,"call":10,"instruccionswitch":11,"instruccionif":12,"instruccionwhile":13,"instruccionfor":14,"instrucciondowhile":15,"instruccionprint":16,"instruccionprintln":17,"VARIABLE":18,"INC":19,"PTCOMA":20,"DEC":21,"CONTINUE":22,"BREAK":23,"returns":24,"RUN":25,"PARIZQ":26,"parametros":27,"PARDER":28,"DOSPUNTOS":29,"tipo":30,"LLAIZQ":31,"LLADER":32,"llamadas":33,"paramllamada":34,"COMA":35,"expresion":36,"IF":37,"ELSE":38,"SWITCH":39,"instruccioncaselist":40,"instrucciondefault":41,"CASE":42,"DEFAULT":43,"WHILE":44,"DO":45,"FOR":46,"fordeclarar":47,"actualizacion":48,"IGUAL":49,"PRINT":50,"PRINTLN":51,"RETURN":52,"notacioncomas":53,"CORIZQ":54,"CORDER":55,"NEW":56,"listavalores":57,"MENOS":58,"NOT":59,"MAS":60,"MULTIPLICACION":61,"DIVISION":62,"MODULO":63,"POTENCIA":64,"MENORIGUALQ":65,"MENORQUE":66,"MAYORIGUALQ":67,"MAYORQUE":68,"IGUALA":69,"DIFERENTE":70,"OR":71,"AND":72,"VENTERO":73,"VDOUBLE":74,"CADENA":75,"VCARACTER":76,"TRUE":77,"FALSE":78,"INTERROGA":79,"TOLOWER":80,"TOUPPER":81,"ROUND":82,"TYPEOF":83,"TOSTRING":84,"LENGTH":85,"TOCHARARRAY":86,"ENTERO":87,"DOUBLE":88,"BOOLEANO":89,"CARACTER":90,"STRING":91,"VOID":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"VARIABLE",19:"INC",20:"PTCOMA",21:"DEC",22:"CONTINUE",23:"BREAK",25:"RUN",26:"PARIZQ",28:"PARDER",29:"DOSPUNTOS",31:"LLAIZQ",32:"LLADER",35:"COMA",37:"IF",38:"ELSE",39:"SWITCH",42:"CASE",43:"DEFAULT",44:"WHILE",45:"DO",46:"FOR",49:"IGUAL",50:"PRINT",51:"PRINTLN",52:"RETURN",54:"CORIZQ",55:"CORDER",56:"NEW",58:"MENOS",59:"NOT",60:"MAS",61:"MULTIPLICACION",62:"DIVISION",63:"MODULO",64:"POTENCIA",65:"MENORIGUALQ",66:"MENORQUE",67:"MAYORIGUALQ",68:"MAYORQUE",69:"IGUALA",70:"DIFERENTE",71:"OR",72:"AND",73:"VENTERO",74:"VDOUBLE",75:"CADENA",76:"VCARACTER",77:"TRUE",78:"FALSE",79:"INTERROGA",80:"TOLOWER",81:"TOUPPER",82:"ROUND",83:"TYPEOF",84:"TOSTRING",85:"LENGTH",86:"TOCHARARRAY",87:"ENTERO",88:"DOUBLE",89:"BOOLEANO",90:"CARACTER",91:"STRING",92:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,3],[6,2],[6,2],[6,2],[6,2],[8,9],[8,8],[9,7],[9,6],[10,2],[33,4],[33,3],[34,3],[34,1],[27,4],[27,2],[12,7],[12,11],[12,9],[12,6],[11,8],[11,7],[11,7],[40,5],[40,4],[41,3],[13,7],[15,9],[14,11],[47,4],[47,3],[48,2],[48,2],[48,3],[16,5],[17,5],[24,2],[24,1],[7,3],[7,5],[7,3],[7,5],[7,11],[7,9],[7,7],[7,14],[7,4],[7,4],[7,7],[7,10],[57,3],[57,1],[53,3],[53,1],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,4],[36,2],[36,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,3],[36,4],[36,7],[36,5],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$ = [new InstructionAST($$[$0-1][0]), new nodoAST('ARBOL SINTACTICO',[$$[$0-1][1]])]; return this.$;  
break;
case 2:
 this.$ = [$$[$0-1][0], new nodoAST('INSTRUCCIONES',[$$[$0-1][1],$$[$0][1]])]; $$[$0-1][0].push($$[$0][0]);  
break;
case 3:
 this.$ = [ [$$[$0][0]] , new nodoAST('INSTRUCCIONES',[$$[$0][1]]) ];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14:
 this.$ = [$$[$0][0], new nodoAST('INSTRUCCION',[$$[$0][1]])]; 
break;
case 15:
 this.$ = [new INSincredecre($$[$0-2], "INCREMENT", _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 16:
 this.$ = [new INSincredecre($$[$0-2], "DECREMENT", _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 17:
 this.$ = [new Continue("CONTINUE",_$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 18:
 this.$ = [new Break("BREAK",_$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 19:
 this.$ = [$$[$0-1][0],new nodoAST('INSTRUCCION',[$$[$0-1][1],new nodoAST($$[$0],null)])]; 
break;
case 20:
 this.$ = [$$[$0][0], new nodoAST('INSTRUCCION',[new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 21:
 this.$ = [new metodos($$[$0-8] ,$$[$0-6][0], $$[$0-3][0], $$[$0-1][0], _$[$0-8].first_line, _$[$0-8].first_column),new nodoAST('FUNCIONES',[new nodoAST($$[$0-8],null), new nodoAST($$[$0-7],null), $$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), $$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 22:
 this.$ = [new metodos($$[$0-7] ,null, $$[$0-3][0], $$[$0-1][0], _$[$0-7].first_line, _$[$0-7].first_column), new nodoAST('FUNCIONES',[new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), $$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null),])]; 
break;
case 23:
 this.$ = [new metodos($$[$0-6] ,$$[$0-4][0], Tipo.VOID, $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('METODOS',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null),  $$[$0-1][1], new nodoAST($$[$0],null)		])] ; 
break;
case 24:
 this.$ = [new metodos($$[$0-5] ,null, Tipo.VOID, $$[$0-1][0], _$[$0-5].first_line, _$[$0-5].first_column) , new nodoAST('METODOS',[new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null),  $$[$0-1][1], new nodoAST($$[$0],null), ])] ;  
break;
case 25:
 this.$ = [$$[$0-1][0],new nodoAST('CALL',[$$[$0-1][1],new nodoAST($$[$0],null)])]; 
break;
case 26:
this.$ = [new llamar($$[$0-3], $$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('LLAMADAS',[new nodoAST($$[$0-3],null),new nodoAST($$[$0-2],null),$$[$0-1][1],new nodoAST($$[$0-2],null)])];
break;
case 27:
this.$ = [new llamar($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('LLAMADAS',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])];   
break;
case 28:
 this.$ = [$$[$0-2][0] , new nodoAST('PARAMETRO LLAMADA',[$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]]) ]; $$[$0-2][0].push($$[$0][0]); 
break;
case 29:
 this.$ = [[$$[$0][0]] , new nodoAST('PARAMETRO LLAMADA',[$$[$0][1]]) ] ; 
break;
case 30:
 this.$ = [ $$[$0-3][0], new nodoAST('PARAMETROS',[$$[$0-3][1],new nodoAST($$[$0-2],null),$$[$0-1][1],new nodoAST($$[$0],null)]) ]; $$[$0-3][0].push(new Declarar($$[$0-1][0], $$[$0], null,  _$[$0-3].first_line, _$[$0-3].first_column)); 
break;
case 31:
 this.$= [[new Declarar($$[$0-1][0], $$[$0], null,  _$[$0-1].first_line, _$[$0-1].first_column)] , new nodoAST('PARAMETROS',[$$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 32:
this.$ = [new INSif($$[$0-4][0], $$[$0-1][0], null, _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('INS IF',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null) ])]; 
break;
case 33:
this.$ = [new INSif($$[$0-8][0], $$[$0-5][0], $$[$0-1][0], _$[$0-10].first_line, _$[$0-10].first_column) , new nodoAST('INS IF',[new nodoAST($$[$0-10],null), new nodoAST($$[$0-9],null), $$[$0-8][1], new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), $$[$0-5][1], new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])];  
break;
case 34:
this.$ = [new INSif($$[$0-6][0], $$[$0-3][0], $$[$0][0], _$[$0-8].first_line, _$[$0-8].first_column), new nodoAST('INS IF',[new nodoAST($$[$0-8],null), new nodoAST($$[$0-7],null), $$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), $$[$0-3][1], new nodoAST($$[$0-2],null), new nodoAST($$[$0-1],null), $$[$0][1]])]; 
break;
case 36:
 this.$ = [new INSswitch($$[$0-5][0], $$[$0-2][0], $$[$0-1][0], _$[$0-7].first_line, _$[$0-7].first_column)  ,new nodoAST('INS SWITCH',[new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), $$[$0-5][1], new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), $$[$0-2][1], $$[$0-1][1], new nodoAST($$[$0],null) ])]; 
break;
case 37:
 this.$ = [new INSswitch($$[$0-4][0], $$[$0-1][0], null, _$[$0-6].first_line, _$[$0-6].first_column),new nodoAST('INS SWITCH',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 38:
 this.$ = [new INSswitch($$[$0-4][0], null, $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column),new nodoAST('INS SWITCH',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1],new nodoAST($$[$0],null)])]; 
break;
case 39:
 this.$ = [$$[$0-4][0],new nodoAST('CASE',[$$[$0-4][1], new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), $$[$0][1],]) ]; $$[$0-4][0].push(new INSCase($$[$0-2][0], $$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column)); 
break;
case 40:
 this.$ = [[new INSCase($$[$0-2][0], $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column)], new nodoAST('CASE',[new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), $$[$0][1]])]; 
break;
case 41:
 this.$ = [$$[$0][0], new nodoAST('DEFAULT', [new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])] 
break;
case 42:
this.$ = [new INSwhile($$[$0-4][0], $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('WHILE', [new nodoAST($$[$0-6],null),new nodoAST($$[$0-5],null),$$[$0-4][1],new nodoAST($$[$0-3],null),new  nodoAST($$[$0-2],null), $$[$0-1][1],new  nodoAST($$[$0],null),])];
break;
case 43:
this.$ = [new INSdowhile($$[$0-2][0], $$[$0-6][0], _$[$0-8].first_line, _$[$0-8].first_column), new nodoAST('DO WHILE', [new nodoAST($$[$0-8],null),new nodoAST($$[$0-7],null),$$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), $$[$0-2][1],new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])];
break;
case 44:
this.$ = [new INSfor($$[$0-8][0], $$[$0-6][0], $$[$0-4][0], $$[$0-1][0],_$[$0-10].first_line, _$[$0-10].first_column), new nodoAST('FOR', [new nodoAST($$[$0-10],null),new nodoAST($$[$0-9],null),$$[$0-8][1],new  nodoAST($$[$0-7],null), $$[$0-6][1], new nodoAST($$[$0-5],null), $$[$0-4][1],new nodoAST($$[$0-3],null),new nodoAST($$[$0-2],null),$$[$0-1][1],new nodoAST($$[$0],null)])];
break;
case 45:
 this.$ = [new Declarar($$[$0-3][0], $$[$0-2], $$[$0][0],  _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('DECLARACION',[$$[$0-3][1],new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])];  
break;
case 46:
 this.$ = [new Asignar($$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('ASIGNACION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 47:
 this.$ = [new INSincredecre($$[$0-1], "INCREMENT", _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('ACTUALIZACION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 48:
 this.$ = [new INSincredecre($$[$0-1], "DECREMENT", _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('ACTUALIZACION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 49:
 this.$ = [new Asignar($$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('ACTUALIZACION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 50:
  this.$ = [new INSprint($$[$0-2][0], _$[$0-4].first_line, _$[$0-4].first_column, false),new nodoAST('PRINT',[new nodoAST($$[$0-4],null),new nodoAST($$[$0-3],null),$$[$0-2][1],new nodoAST($$[$0-1],null)])];   
break;
case 51:
 this.$ = [new INSprint($$[$0-2][0], _$[$0-4].first_line, _$[$0-4].first_column, true),new nodoAST('PRINT',[new nodoAST($$[$0-4],null),new nodoAST($$[$0-3],null),$$[$0-2][1],new nodoAST($$[$0-1],null)])]; 
break;
case 52:
 this.$ = [new INSreturn($$[$0][0],_$[$0-1].first_line, _$[$0-1].first_column)  , new nodoAST('RETURN',[new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 53:
 this.$ = [new INSreturn(null,_$[$0].first_line, _$[$0].first_column), new nodoAST('RETURN',[new nodoAST($$[$0],null)])]; 
break;
case 54:
 this.$ = [new Declarar($$[$0-2][0], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('DECLARACION',[$$[$0-2][1], new nodoAST($$[$0-1],null), new nodoAST($$[$0],null),])] ; 
break;
case 55:
 this.$ = [new Declarar($$[$0-4][0], $$[$0-3], $$[$0-1][0],  _$[$0-4].first_line, _$[$0-4].first_column)  , new nodoAST('DECLARACION',[$$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null),])] ;
break;
case 56:
 this.$ = [new Declarar($$[$0-2][0], $$[$0-1][0], null,  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('DECLARACION',[$$[$0-2][1], $$[$0-1][1], new nodoAST($$[$0],null),])] ; 
break;
case 57:
 this.$ = [new Declarar($$[$0-4][0], $$[$0-3][0], $$[$0-1][0],  _$[$0-4].first_line, _$[$0-4].first_column)  , new nodoAST('DECLARACION',[$$[$0-4][1], $$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null),])] ; 
break;
case 58:
 this.$ = [new DeclaraVector1($$[$0-10][0], $$[$0-9], $$[$0-4][0], $$[$0-2][0], _$[$0-10].first_line, _$[$0-10].first_column), new nodoAST('EXPRESION', [$$[$0-10][1], new nodoAST($$[$0-9],null), new nodoAST($$[$0-8],null), new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), new nodoAST($$[$0],null)])]; 
break;
case 59:
 this.$ = [new DeclaraVector1($$[$0-8][0], $$[$0-7], null, $$[$0-2][0], _$[$0-8].first_line, _$[$0-8].first_column), new nodoAST('EXPRESION', [$$[$0-8][1], new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), new nodoAST($$[$0],null)])]; 
break;
case 60:
 this.$ = [new DeclaraVector1($$[$0-6][0], $$[$0-5], $$[$0-6][0], $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('EXPRESION', [$$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null),  $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 61: case 65: case 98:
  
break;
case 62:
 this.$ = [new Asignar($$[$0-3][0], $$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column),new nodoAST('DECLARACION',[$$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])];  
break;
case 63:
 this.$ = [new Asignar($$[$0-3], $$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column),new nodoAST('DECLARACION',[new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1] ,new nodoAST($$[$0],null)])];  
break;
case 64:
 this.$ = [new AsignaVector1($$[$0-6], $$[$0-4][0], $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1],new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null),  $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 66:
 this.$ = [$$[$0-2][0],new nodoAST('LIST VALORES',[$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])] ; $$[$0-2][0].push($$[$0][0]);
break;
case 67:
 this.$ = [ [$$[$0][0]] , new nodoAST('LIST VALORES',[$$[$0][1]]) ];
break;
case 68:
 this.$=[$$[$0-2][0], new nodoAST('NOT COMAS',[$$[$0-2][1],new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])] ; $$[$0-2][0].push($$[$0]); 
break;
case 69:
 this.$=[[$$[$0]], new nodoAST('NOT COMAS',[new nodoAST($$[$0],null)])];  
break;
case 70:
 this.$ = [new INSAritmetico(null, $$[$0][0], 'UNITARIA',  _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 71:
 this.$ = [new INSLogico(null, $$[$0][0], 'NOT', _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-1],null),$$[$0][1]])];
break;
case 72:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'SUMA',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 73:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'RESTA',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 74:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'MULTIPLICACION',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 75:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'DIVISION',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 76:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'MODULO',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 77:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'POTENCIA',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 78:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MENORIGUAL',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 79:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MENOR',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 80:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MAYORIGUAL',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 81:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MAYOR',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 82:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'IGUAL',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 83:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'NEGACION',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 84:
 this.$ = [new INSLogico($$[$0-2][0], $$[$0][0], 'OR', _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 85:
 this.$ = [new INSLogico($$[$0-2][0], $$[$0][0], 'AND', _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 86:
 this.$ = [new INSCastear($$[$0-2][0], $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null),$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 87:
 this.$ = [new INSincredecre($$[$0-1], "INCREMENT", _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('EXPRESION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 88:
 this.$ = [new INSincredecre($$[$0-1], "DECREMENT", _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('EXPRESION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 89:
 this.$ = [new id($$[$0], _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 90:
 this.$ = [new INSPrimitivos(Tipo.INT, Number($$[$0]), _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', [new nodoAST('ENTERO', [new nodoAST(yytext,null)])])]; 
break;
case 91:
 this.$ = [new INSPrimitivos(Tipo.DOUBLE, Number($$[$0]), _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', [new nodoAST('DOUBLE', [new nodoAST(yytext,null)])])]; 
break;
case 92:
 this.$ = [new INSPrimitivos(Tipo.STRING, $$[$0], _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', [new nodoAST('CADENA', [new nodoAST(yytext,null)])])]; 
break;
case 93:
 this.$ = [new INSPrimitivos(Tipo.CARACTER, $$[$0], _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', [new nodoAST('CARACTER', [new nodoAST(yytext,null)])])]; 
break;
case 94:
 this.$ = [new INSPrimitivos(Tipo.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', [new nodoAST('BOOLEANO', [new nodoAST($$[$0],null)])])]; 
break;
case 95:
 this.$ = [new INSPrimitivos(Tipo.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', [new nodoAST('BOOLEANO', [new nodoAST($$[$0],null)])])]; 
break;
case 96:
 this.$ = [$$[$0-1][0],new nodoAST('EXPRESION', [new nodoAST($$[$0-2],null),$$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 97:
 this.$ = [new Vector1($$[$0-3], $$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [$$[$0-3][1],new nodoAST($$[$0-2],null),$$[$0-1][1],new nodoAST($$[$0],null)])]; 
break;
case 99:
  this.$ = [new INSTernario($$[$0-4][0], $$[$0-2][0], $$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column),new nodoAST('EXPRESION', [$$[$0-4][1], new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), $$[$0][1]])]; 
break;
case 100:
 this.$ = [new ToLower($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])];  
break;
case 101:
 this.$ = [new ToUpper($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 102:
 this.$ = [new FUNCround($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 103:
 this.$ = [new TypeOf($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 104:
 this.$ = [new ToString($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 105:
 this.$ = [new FUNClength($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 106:
 this.$ = [new ToCharArray($$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 107:
 this.$= [$$[$0][0], new nodoAST('EXPRESION', [$$[$0][1]])]; 
break;
case 108:
 this.$ = [Tipo.INT, new nodoAST($$[$0],null)]; 
break;
case 109:
 this.$ = [Tipo.DOUBLE, new nodoAST($$[$0],null)]; 
break;
case 110:
 this.$ = [Tipo.BOOLEAN, new nodoAST($$[$0],null)]; 
break;
case 111:
 this.$ = [Tipo.CARACTER, new nodoAST($$[$0],null)]; 
break;
case 112:
 this.$ = [Tipo.STRING, new nodoAST($$[$0],null)]; 
break;
case 113:
 this.$ = [Tipo.VOID, new nodoAST($$[$0],null)]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{1:[3]},{5:[1,37],6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),{19:[1,39],21:[1,40],26:[1,43],35:$Vj,49:[1,41],54:[1,42]},{20:[1,44]},{20:[1,45]},{20:[1,46]},{10:47,18:[1,48],33:22},{18:[1,49],53:50},{35:$Vk,49:[1,51]},{20:[1,53]},{26:[1,54]},{26:[1,55]},{26:[1,56]},{26:[1,57]},{31:[1,58]},{26:[1,59]},{26:[1,60]},{18:$Vl,20:[2,53],26:$Vm,33:79,36:61,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VC,[2,108]),o($VC,[2,109]),o($VC,[2,110]),o($VC,[2,111]),o($VC,[2,112]),o($VC,[2,113]),{1:[2,1]},o($Vi,[2,2]),{20:[1,80]},{20:[1,81]},{18:$Vl,26:$Vm,33:79,36:82,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:83,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,27:84,28:[1,85],30:87,33:79,34:86,36:88,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),{26:$VD},{20:[1,90],35:$Vj,49:[1,91],54:[1,92]},{20:[1,93],35:$Vk,49:[1,94]},{18:$Vl,26:$Vm,33:79,36:95,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:[1,96]},o($Vi,[2,25]),{18:$Vl,26:$Vm,33:79,36:97,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:98,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:99,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:[1,102],30:101,47:100,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:103,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:$Vl,26:$Vm,33:79,36:104,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:105,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{20:[2,52],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{18:$Vl,26:$Vm,33:79,36:121,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:122,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,30:123,33:79,36:124,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VT,[2,89],{19:[1,125],21:[1,126],26:$VD,54:[1,127]}),o($VT,[2,90]),o($VT,[2,91]),o($VT,[2,92]),o($VT,[2,93]),o($VT,[2,94]),o($VT,[2,95]),{26:[1,128]},{26:[1,129]},{26:[1,130]},{26:[1,131]},{26:[1,132]},{26:[1,133]},{26:[1,134]},o($VT,[2,107]),o($Vi,[2,15]),o($Vi,[2,16]),{20:[1,135],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{55:[1,136],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,137],35:[1,138]},{20:$VU,29:[1,139],31:[1,140]},{28:[1,141],35:[1,142]},{18:[1,143]},o($VV,[2,29],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS}),{18:$Vl,26:$Vm,28:[1,144],33:79,34:86,36:88,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vi,[2,54]),{18:$Vl,26:$Vm,33:79,36:145,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{55:[1,146]},o($Vi,[2,56]),{18:$Vl,26:$Vm,33:79,36:147,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{20:[1,148],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},o([20,35,49],[2,68]),{28:[1,149],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,150],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,151],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{20:[1,152]},{18:[1,153]},{49:[1,154]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,155],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{28:[1,156],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,157],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{18:$Vl,26:$Vm,33:79,36:158,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:159,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:160,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:161,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:162,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:163,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:164,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:165,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:166,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:167,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:168,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:169,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:170,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:171,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:172,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VT,[2,70]),o($VW,[2,71],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),{28:[1,173]},{28:[1,174],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},o($VT,[2,87]),o($VT,[2,88]),{18:$Vl,26:$Vm,33:79,36:175,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:176,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:177,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:178,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:179,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:180,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:181,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:182,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vi,[2,63]),{49:[1,183],54:[1,184]},{29:[1,185],31:[1,186]},{30:187,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{30:188,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:189,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VT,[2,26]),{18:$Vl,26:$Vm,33:79,36:190,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VV,[2,31]),o($VT,$VU),{20:[1,191],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{49:[1,192]},{20:[1,193],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},o($Vi,[2,62]),{31:[1,194]},{31:[1,195]},{31:[1,196]},{18:$Vl,26:$Vm,33:79,36:197,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{49:[1,198]},{18:$Vl,26:$Vm,33:79,36:199,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{44:[1,200]},{20:[1,201]},{20:[1,202]},o($VX,[2,72],{61:$VG,62:$VH,63:$VI,64:$VJ}),o($VX,[2,73],{61:$VG,62:$VH,63:$VI,64:$VJ}),o($VT,[2,74]),o($VT,[2,75]),o($VT,[2,76]),o($VT,[2,77]),o($VY,[2,78],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VY,[2,79],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VY,[2,80],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VY,[2,81],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VY,[2,82],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VY,[2,83],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VZ,[2,84],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,72:$VR}),o($VW,[2,85],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),{29:[1,203],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{18:$Vl,26:$Vm,33:79,36:204,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VT,[2,96]),{55:[1,205],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,206],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,207],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,208],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,209],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,210],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,211],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{28:[1,212],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{18:$Vl,26:$Vm,33:79,36:213,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{18:$Vl,26:$Vm,33:79,36:214,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{30:215,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:216,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:[1,217]},{31:[1,218]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,219],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VV,[2,28],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS}),o($Vi,[2,55]),{18:$Vl,26:$Vm,33:79,36:222,54:[1,221],56:[1,220],58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vi,[2,57]),{40:223,41:224,42:[1,225],43:$V_},{4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,228],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:229,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{20:[1,230],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{18:$Vl,26:$Vm,33:79,36:231,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{20:[2,46],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{26:[1,232]},o($Vi,[2,50]),o($Vi,[2,51]),{18:$Vl,26:$Vm,33:79,36:233,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VZ,[2,86],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,72:$VR}),o($VT,[2,97],{54:[1,234]}),o($VT,[2,100]),o($VT,[2,101]),o($VT,[2,102]),o($VT,[2,103]),o($VT,[2,104]),o($VT,[2,105]),o($VT,[2,106]),{20:[1,235],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{55:[1,236],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{31:[1,237]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,238],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VV,[2,30]),{4:239,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,24]),{30:240,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:$Vl,26:$Vm,33:79,36:242,57:241,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{20:[1,243],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{32:[1,245],41:244,42:[1,246],43:$V_},{32:[1,247]},{18:$Vl,26:$Vm,33:79,36:248,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{29:[1,249]},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,250],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,35]),{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,251],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:[1,253],48:252},{20:[2,45],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{18:$Vl,26:$Vm,33:79,36:254,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VZ,[2,99],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,72:$VR}),{18:$Vl,26:$Vm,33:79,36:255,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vi,[2,64]),{49:[1,256]},{4:257,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,23]),{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,258],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{54:[1,259]},{35:[1,261],55:[1,260]},o($V$,[2,67],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS}),o($Vi,[2,60]),{32:[1,262]},o($Vi,[2,37]),{18:$Vl,26:$Vm,33:79,36:263,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vi,[2,38]),{29:[1,264],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,32],{38:[1,266]}),o($Vi,[2,42]),{28:[1,267]},{19:[1,268],21:[1,269],49:[1,270]},{28:[1,271],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{55:[1,272],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{18:$Vl,26:$Vm,33:79,36:273,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,274],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,22]),{18:$Vl,26:$Vm,33:79,36:275,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{20:[1,276]},{18:$Vl,26:$Vm,33:79,36:277,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vi,[2,36]),{29:[1,278],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{4:279,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[2,41],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{12:281,31:[1,280],37:$V4},{31:[1,282]},{28:[2,47]},{28:[2,48]},{18:$Vl,26:$Vm,33:79,36:283,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{20:[1,284]},o($VT,[2,98]),{20:[1,285],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},o($Vi,[2,21]),{55:[1,286],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},o($Vi,[2,59]),o($V$,[2,66],{58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS}),{4:287,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($V01,[2,40],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,24:18,30:20,53:21,33:22,6:38,18:$V0,22:$V1,23:$V2,25:$V3,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh}),{4:288,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,34]),{4:289,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{28:[2,49],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},o($Vi,[2,43]),o($Vi,[2,65]),{20:[1,290],54:[1,291]},o($V01,[2,39],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,24:18,30:20,53:21,33:22,6:38,18:$V0,22:$V1,23:$V2,25:$V3,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh}),{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,292],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,22:$V1,23:$V2,24:18,25:$V3,30:20,32:[1,293],33:22,37:$V4,39:$V5,44:$V6,45:$V7,46:$V8,50:$V9,51:$Va,52:$Vb,53:21,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,58]),{18:$Vl,26:$Vm,33:79,36:294,58:$Vn,59:$Vo,73:$Vp,74:$Vq,75:$Vr,76:$Vs,77:$Vt,78:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vi,[2,33]),o($Vi,[2,44]),{55:[1,295],58:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,71:$VQ,72:$VR,79:$VS},{20:[1,296]},o($Vi,[2,61])],
defaultActions: {37:[2,1],268:[2,47],269:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const {MiArbolAST} = require('../Instructions/ASTGlobal/InstructionAST');
	var {InstructionAST} = require('../Instructions/ASTGlobal/InstructionAST')
	var {nodoAST} = require('../Instructions/ASTGlobal/nodoAST')
	const instruccionesAPI	= require('../Interpreter/interprete').instruccionesAPI; //las instrucciones de la API
    const {INSprint} = require('../Instructions/INSprint');
    const {INSAritmetico} = require('../Instructions/INSAritmetico');
    const {INSRelacional} = require('../Instructions/INSRelacional');
    const {INSLogico} = require('../Instructions/INSLogico');
    const {Asignar} = require('../Instructions/Asignar');
    const {Declarar} = require('../Instructions/Declarar');
    const {INSCastear} = require('../Instructions/INSCastear');
    const {INSPrimitivos} = require('../Instructions/INSPrimitivos');
    const {id} = require('../Instructions/id');
    const {INSincredecre} = require('../Instructions/INSincredecre');
    const {INSreturn} = require('../Instructions/INSreturn');
    const {llamar} = require('../Instructions/llamar');
    const {metodos} = require('../Instructions/metodos');
    const {INSTernario} = require('../Instructions/INSTernario');
    const {FUNClength} = require('../Instructions/FUNClength');
    const {FUNCround} = require('../Instructions/FUNCround');
    const {ToCharArray} = require('../Instructions/ToCharArray');
    const {ToLower} = require('../Instructions/ToLower');
    const {ToString} = require('../Instructions/ToString');
    const {ToUpper} = require('../Instructions/ToUpper');
    const {TypeOf} = require('../Instructions/TypeOf');
    const {DeclaraVector1} = require('../Instructions/DeclaraVector1');
    const {AsignaVector1} = require('../Instructions/AsignaVector1');
    const {Vector1} = require('../Instructions/Vector1');

	//SENTENCIAS
    const {INSif} = require('../Instructions/INSif');
    const {INSwhile} = require('../Instructions/INSwhile');
    const {INSdowhile} = require('../Instructions/INSdowhile');
    const {INSfor} = require('../Instructions/INSfor');
    const {INSswitch} = require('../Instructions/INSswitch');
	const {INSCase} = require('../Instructions/INSCase');
	//pauses
	const {Break} = require('../Instructions/Break');
	const {Continue} = require('../Instructions/Continue');
	const Tipo = require("../Instructions/ASTGlobal/tiponodo");
	const tipos = require("../Instructions/ASTGlobal/tiponodo");
	var sintacticerror = "";
	var acumoftext="";
	var arbolINSERRORES = new InstructionAST();//por si hay errores
	// var erroreslexicos=[];
	//PARA MI AST
	// var arbol = new MiArbolAST();
	// var MiArbolAST = new InstructionAST();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:acumoftext=""; this.begin("CADENA");
break;
case 6:acumoftext+=yy_.yytext;
break;
case 7:acumoftext+='\n';
break;
case 8:acumoftext+='\t';
break;
case 9:acumoftext+='\r';
break;
case 10:acumoftext+='\"';
break;
case 11:acumoftext+='\'';
break;
case 12:acumoftext+='\\';
break;
case 13:yy_.yytext = acumoftext; this.popState(); return 75;
break;
case 14:return 87;
break;
case 15:return 88;
break;
case 16:return 89;
break;
case 17:return 90;
break;
case 18:return 92
break;
case 19:return 91;
break;
case 20:return 77
break;
case 21:return 78
break;
case 22:return 56
break;
case 23:return 19
break;
case 24:return 21
break;
case 25:return 60
break;
case 26:return 58
break;
case 27:return 61
break;
case 28:return 62
break;
case 29:return 64
break;
case 30:return 63
break;
case 31:return 69
break;
case 32:return 70
break;
case 33:return 65
break;
case 34:return 66
break;
case 35:return 67
break;
case 36:return 68
break;
case 37:return 49
break;
case 38:return 20
break;
case 39:return 79
break;
case 40:return 29
break;
case 41:return 35
break;
case 42:return 71
break;
case 43:return 72
break;
case 44:return 59
break;
case 45:return 26
break;
case 46:return 28
break;
case 47:return 31
break;
case 48:return 32
break;
case 49:return 54
break;
case 50:return 55
break;
case 51:return 37
break;
case 52:return 38
break;
case 53:return 39
break;
case 54:return 42
break;
case 55:return 23
break;
case 56:return 43
break;
case 57:return 44
break;
case 58:return 45
break;
case 59:return 46
break;
case 60:return 22
break;
case 61:return 52
break;
case 62:return 50
break;
case 63:return 51
break;
case 64:return 80
break;
case 65:return 81
break;
case 66:return 82
break;
case 67:return 85
break;
case 68:return 83
break;
case 69:return 84
break;
case 70:return 86 
break;
case 71:return 25
break;
case 72:return 74;
break;
case 73:return 73;
break;
case 74:return 18
break;
case 75:return 76
break;
case 76:return 5;
break;
case 77: 	console.log('Este es un error lexico: (  ' + yy_.yytext + '  ) en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
		// instruccionesAPI.getAST.error.push(instruccionesAPI.errorlexico(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
		// instruccionesAPI.getAST.setError(instruccionesAPI.errorLexico('Carecter irreconocible:  '+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
		erroreslexicos.push(instruccionesAPI.errorLexico('Carecter irreconocible:  '+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
		// instruccionesAPI.getErrores.getInstance().insertar(new ErrorList("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column)); 
		// return arboolINSERRORES
		
	
break;
}
},
rules: [/^(?:\n)/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:(\/\*(\s*|.*?)*\*\/)|(\/\/.*))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:\\")/i,/^(?:\\\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:Int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:;)/i,/^(?:\?)/i,/^(?::)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-z|A-Z])[a-z|A-Z|0-9|"_"]*)/i,/^(?:('(([\\][\"]|[\\][\']|[\\][n]|[\\][t]|[\\][\\])|([^\n\'\"\\]{1}))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CADENA":{"rules":[6,7,8,9,10,11,12,13],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

exports.erroreslexicos=erroreslexicos;
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = myGrammar;
exports.Parser = myGrammar.Parser;
exports.parse = function () { return myGrammar.parse.apply(myGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}