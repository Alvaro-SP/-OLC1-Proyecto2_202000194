/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var myGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,19],$V3=[1,20],$V4=[1,31],$V5=[1,30],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,35],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,29],$Vh=[1,28],$Vi=[5,79],$Vj=[5,18,19,22,24,65,72,73,74,75,76,77,79,90,91,94,97,98,99,100],$Vk=[1,69],$Vl=[1,70],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[22,29,52,78],$VD=[1,94],$VE=[1,105],$VF=[1,116],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[1,115],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[1,122],$VW=[1,124],$VX=[6,23,27,30,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,59,60,61],$VY=[2,63],$VZ=[1,127],$V_=[1,128],$V$=[1,129],$V01=[34,59],$V11=[6,27],$V21=[6,23,30,34,37,38,42,43,44,46,47,48,49,50,52,59,61],$V31=[1,197],$V41=[1,196],$V51=[6,30,34,52,59,61],$V61=[6,30,34,42,43,44,46,47,48,49,50,52,59,61],$V71=[1,240],$V81=[1,242],$V91=[6,30,34,49,50,52,59,61],$Va1=[2,71],$Vb1=[30,34,52,59],$Vc1=[23,27,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,60],$Vd1=[2,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"PTCOMA":6,"instruccion":7,"declaracion":8,"instruccionif":9,"instruccionwhile":10,"instruccionfor":11,"instrucciondowhile":12,"funciones":13,"metodos":14,"llamadas":15,"instruccionprint":16,"instruccionprintln":17,"BREAK":18,"CONTINUE":19,"returns":20,"instruccionrun":21,"VARIABLE":22,"MAS":23,"MENOS":24,"tipo":25,"notacioncomas":26,"IGUAL":27,"expresion":28,"CORIZQ":29,"CORDER":30,"NEW":31,"listavalores":32,"notacioncomas2":33,"COMA":34,"listavalores2":35,"RESTA":36,"MULTIPLICACION":37,"DIVISION":38,"MODULO":39,"POTENCIA":40,"MENORIGUALQ":41,"MENORQUE":42,"MAYORIGUALQ":43,"MAYORQUE":44,"IGUALQUE":45,"IGUALA":46,"DIFERENTE":47,"NOT":48,"OR":49,"AND":50,"PARA":51,"PARC":52,"VENTERO":53,"VDOUBLE":54,"CADENA":55,"TRUE":56,"FALSE":57,"PARIZQ":58,"PARDER":59,"INTERROGACION":60,"DOSPUNTOS":61,"TOLOWER":62,"TOUPPER":63,"ROUND":64,"DOUBLE":65,"TYPEOF":66,"TOSTRING":67,"llamar":68,"LENGTH":69,"valor":70,"TOCHARARRAY":71,"ENTERO":72,"BOOLEANO":73,"CARACTER":74,"STRING":75,"VOID":76,"IF":77,"LLAIZQ":78,"LLADER":79,"ELSE":80,"if":81,"instruccionswitch":82,"SWITCH":83,"caselist":84,"default":85,"instruccioncaselist":86,"CASE":87,"instrucciondefault":88,"DEFAULT":89,"WHILE":90,"FOR":91,"fordeclarar":92,"actualizacion":93,"DO":94,"parametros":95,"paramllamada":96,"PRINT":97,"PRINTLN":98,"RUN":99,"RETURN":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"PTCOMA",18:"BREAK",19:"CONTINUE",22:"VARIABLE",23:"MAS",24:"MENOS",27:"IGUAL",29:"CORIZQ",30:"CORDER",31:"NEW",34:"COMA",36:"RESTA",37:"MULTIPLICACION",38:"DIVISION",39:"MODULO",40:"POTENCIA",41:"MENORIGUALQ",42:"MENORQUE",43:"MAYORIGUALQ",44:"MAYORQUE",45:"IGUALQUE",46:"IGUALA",47:"DIFERENTE",48:"NOT",49:"OR",50:"AND",51:"PARA",52:"PARC",53:"VENTERO",54:"VDOUBLE",55:"CADENA",56:"TRUE",57:"FALSE",58:"PARIZQ",59:"PARDER",60:"INTERROGACION",61:"DOSPUNTOS",62:"TOLOWER",63:"TOUPPER",64:"ROUND",65:"DOUBLE",66:"TYPEOF",67:"TOSTRING",68:"llamar",69:"LENGTH",71:"TOCHARARRAY",72:"ENTERO",73:"BOOLEANO",74:"CARACTER",75:"STRING",76:"VOID",77:"IF",78:"LLAIZQ",79:"LLADER",80:"ELSE",81:"if",83:"SWITCH",84:"caselist",85:"default",87:"CASE",89:"DEFAULT",90:"WHILE",91:"FOR",94:"DO",97:"PRINT",98:"PRINTLN",99:"RUN",100:"RETURN"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,4],[7,4],[7,4],[8,3],[8,3],[8,5],[8,5],[8,11],[8,14],[8,9],[8,8],[8,11],[8,4],[8,7],[8,10],[26,2],[33,3],[32,2],[32,3],[32,1],[35,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,3],[28,3],[28,4],[28,3],[28,3],[28,4],[28,3],[28,3],[28,4],[28,4],[28,4],[28,4],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,7],[28,3],[28,5],[28,4],[28,4],[28,4],[28,4],[28,4],[28,1],[28,4],[28,4],[28,4],[28,4],[70,1],[70,1],[70,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[9,7],[9,11],[9,9],[9,6],[82,8],[82,7],[82,7],[86,5],[86,4],[88,3],[10,7],[11,11],[92,4],[92,3],[93,3],[93,3],[93,3],[12,9],[13,9],[13,8],[95,4],[95,2],[14,9],[14,7],[14,8],[14,6],[15,4],[15,3],[96,3],[96,1],[16,4],[17,4],[21,4],[21,5],[20,2],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 3: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 63: case 64: case 65: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 106: case 107: case 108: case 109: case 110: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 122: case 123: case 125: case 126: case 127:
  
break;
case 2:
 	sintacticerror="Detectado error Sintactico se esperaba otro valor y se recibio: "+yytext+" reparelo.";
												console.error('Este es un error sintactico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
												instruccionesAPI.getAST.setError(instruccionesAPI.errorsintactico(sintacticerror,yylloc.first_line,yylloc.first_column));
										
break;
case 4:
this.$=[$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 129:
 this.$ = $$[$0]; 
break;
case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 66: case 128:
 this.$ = $$[$0-1]; 
break;
case 19: case 20: case 21:
 this.$ = $$[$0-3]; 
break;
case 40:
 this.$ = $$[$0] * -1; 
break;
case 41:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 42:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 43:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 44:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 45:
 this.$ = $$[$0-2] % $$[$0]; 
break;
case 46:
 this.$ = $$[$0-2] ^ $$[$0]; 
break;
case 62:
 
break;
case 104:
this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 120: case 121: case 124:
   
break;
}
},
table: [{2:[1,3],3:1,4:2,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{1:[3]},{5:[1,36]},{6:[1,37]},o($Vi,[2,4],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,20:17,21:18,25:21,4:38,18:$V0,19:$V1,22:$V2,24:$V3,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh}),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),{6:[1,39]},{6:[1,40]},{6:[1,41]},{6:[1,42]},{6:[1,43]},{6:[1,44]},{6:[1,45]},{23:[1,46],24:[1,47],27:[1,48],29:[1,49],58:[1,50]},{24:[1,51]},{22:[1,52],26:53},{58:[1,54]},{58:[1,55]},{58:[1,56]},{78:[1,57]},{58:[1,58]},{58:[1,59]},{6:[2,129],22:$Vk,23:$Vl,24:$Vm,28:60,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:[1,79]},o($VC,[2,88]),o($VC,[2,89]),o($VC,[2,90]),o($VC,[2,91]),o($VC,[2,92]),o([22,29,52],[2,93]),{1:[2,1]},{1:[2,2]},o($Vi,[2,3]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),{23:[1,80]},{24:[1,81]},{22:$Vk,23:$Vl,24:$Vm,28:82,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:83,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,25:87,28:88,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:[1,85],62:$Vu,63:$Vv,64:$Vw,65:$V4,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,95:84,96:86},{22:[1,89]},{6:[1,90],27:[1,91],29:[1,92],33:93,34:$VD},{6:[1,95],27:[1,96]},{22:$Vk,23:$Vl,24:$Vm,28:97,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:98,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:[1,101],25:100,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,92:99},{4:102,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{22:$Vk,23:$Vl,24:$Vm,28:103,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:104,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{6:[2,128],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{22:$Vk,23:$Vl,24:$VW,28:123,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{25:125,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9},o($VX,[2,61]),o($VX,[2,62]),o($VX,$VY),o($VX,[2,64]),o($VX,[2,65]),{22:$Vk,23:$Vl,24:$Vm,28:126,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{23:$VZ,24:$V_,29:$V$},{23:[1,130]},{58:[1,131]},{58:[1,132]},{58:[1,133]},{58:[1,134]},{58:[1,135]},o($VX,[2,80]),{58:[1,136]},{58:[1,137]},{51:[1,138]},{6:[1,139]},{6:[1,140]},{6:[1,141],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{23:$VE,27:$VF,30:[1,142],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{34:[1,144],59:[1,143]},{6:[2,121],61:[1,145],78:[1,146]},{34:[1,148],59:[1,147]},{22:[1,149]},o($V01,[2,123],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),{6:[1,150]},o($Vj,[2,22]),{22:[1,152],23:$Vl,24:$Vm,28:151,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{30:[1,153]},o($V11,[2,34]),{22:[1,154]},o($Vj,[2,23]),{22:$Vk,23:$Vl,24:$Vm,28:155,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,156],60:$VV},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,157],60:$VV},{6:[1,158]},{22:[1,159]},{27:[1,160]},{79:[1,161]},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,162],60:$VV},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,163],60:$VV},{22:$Vk,23:$Vl,24:$Vm,28:164,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:165,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:166,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:167,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:168,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:169,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:170,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,27:[1,171],28:172,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:173,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,27:[1,174],28:175,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:176,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{27:[1,177]},{22:$Vk,23:$Vl,24:$Vm,28:178,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:179,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{27:[1,180]},{49:[1,181]},{50:[1,182]},{22:$Vk,23:$Vl,24:$Vm,28:183,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($V21,[2,40],{27:$VF,36:$VG,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),{22:[1,184],23:$Vl,24:$VW,28:123,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{52:[1,185]},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,186],60:$VV},{23:[1,187]},{24:[1,188]},{22:$Vk,23:$Vl,24:$Vm,28:189,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:[1,190]},{22:$Vk,23:$Vl,24:$Vm,28:191,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:192,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{65:[1,193]},{22:$V31,23:$Vl,24:$Vm,28:194,32:198,51:$Vn,53:$Vo,54:$Vp,55:$V41,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:195,71:$VB},{22:$V31,23:$Vl,24:$Vm,28:199,32:198,51:$Vn,53:$Vo,54:$Vp,55:$V41,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:200,71:$VB},{22:$V31,23:$Vl,24:$Vm,28:202,32:198,51:$Vn,53:$Vo,54:$Vp,55:$V41,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:201,71:$VB},{22:$V31,23:$Vl,24:$Vm,28:202,32:198,51:$Vn,53:$Vo,54:$Vp,55:$V41,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:203,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:202,32:205,51:$Vn,52:[1,204],53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,31]),{27:[1,206],29:[1,207]},{61:[1,208],78:[1,209]},{25:210,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9},{25:211,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:[1,212]},{4:213,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{6:[2,120]},{22:$Vk,23:$Vl,24:$Vm,28:214,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($V01,[2,115]),o($Vj,[2,21]),{6:[1,215],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{23:$VZ,24:$V_,29:[1,216]},{27:[1,217]},{33:218,34:$VD},{6:[1,219],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{78:[1,220]},{78:[1,221]},{22:$Vk,23:$Vl,24:$Vm,28:222,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{27:[1,223]},{22:$Vk,23:$Vl,24:$Vm,28:224,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{90:[1,225]},{6:[2,124]},{6:[2,125]},o([6,23,30,34,42,43,44,46,47,48,49,50,52,59,61],[2,41],{27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V51,[2,42],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),o($V21,[2,43],{27:$VF,36:$VG,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V21,[2,44],{27:$VF,36:$VG,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V51,[2,45],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),o($V51,[2,46],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),o($V51,[2,47],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),{22:$Vk,23:$Vl,24:$Vm,28:226,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($V61,[2,49],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V61,[2,50],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),{22:$Vk,23:$Vl,24:$Vm,28:227,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($V61,[2,52],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V51,[2,53],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),{22:$Vk,23:$Vl,24:$Vm,28:228,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($V61,[2,55],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V61,[2,56],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),{22:$Vk,23:$Vl,24:$Vm,28:229,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:230,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:231,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV,61:[1,232]},o($VX,[2,70],{24:$V_,29:$V$}),{22:$Vk,23:$Vl,24:$Vm,28:233,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($VX,[2,66]),o($VX,[2,67]),o($VX,[2,69]),{23:$VE,27:$VF,30:[1,234],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},o($VX,[2,68]),{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,235],60:$VV},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,236],60:$VV},{59:[1,237]},{23:$VE,27:$VF,34:$V71,35:239,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,238],60:$VV},{59:[1,241]},o([23,27,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,59,60],$VY),{23:$VZ,24:$V_,29:$V$,59:[2,87]},{34:$V81,59:[2,85]},{23:$VE,27:$VF,34:$V71,35:239,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,243],60:$VV},{59:[1,244]},{59:[1,245]},o([30,52,59],[2,38],{35:239,23:$VE,27:$VF,34:$V71,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),{59:[1,246]},{6:[2,126]},{34:$V81,52:[1,247]},{22:$Vk,23:$Vl,24:$Vm,28:248,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:249,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{25:250,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:[1,251]},{4:252,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{22:[1,253]},{78:[1,254]},{78:[1,255]},{79:[1,256]},o($V01,[2,122],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),o($Vj,[2,24]),{22:$Vk,23:$Vl,24:$Vm,28:257,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{29:[1,259],31:[1,258]},o($V11,[2,35]),o($Vj,[2,25]),{4:260,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,79:[1,261],90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{4:262,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{6:[1,263],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{22:$Vk,23:$Vl,24:$Vm,28:264,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{6:[2,107],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{58:[1,265]},o($V61,[2,48],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V61,[2,51],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,45:$VP,60:$VV}),o($V51,[2,54],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),o($V91,[2,57],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,60:$VV}),o([6,30,34,49,52,59,61],[2,58],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,50:$VU,60:$VV}),o($V91,[2,59],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,60:$VV}),{22:$Vk,23:$Vl,24:$Vm,28:266,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($V51,[2,60],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),o($VX,$Va1,{29:[1,267]}),o($VX,[2,75]),o($VX,[2,76]),o($VX,[2,77]),o($VX,[2,78]),o($Vb1,[2,36]),{22:$Vk,23:$Vl,24:$Vm,28:268,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($VX,[2,82]),{22:$Vk,23:$Vl,24:$Vm,28:269,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($VX,[2,79]),o($VX,[2,83]),o($VX,[2,81]),o($VX,[2,84]),{6:[2,127]},{6:[1,270],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{23:$VE,27:$VF,30:[1,271],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{78:[1,272]},{78:[1,273]},{79:[1,274]},o($V01,[2,114]),{4:275,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{4:276,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},o($Vj,[2,119]),{23:$VE,27:$VF,30:[1,277],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{25:278,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9},{22:$Vk,23:$Vl,24:$Vm,28:202,32:279,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{79:[1,280]},o($Vj,[2,97]),{79:[1,281]},{22:[1,283],93:282},{6:[2,106],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{22:$Vk,23:$Vl,24:$Vm,28:284,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($V51,[2,74],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),{22:$Vk,23:$Vl,24:$Vm,28:285,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{23:$VE,27:$VF,34:$V71,35:286,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},o($Vb1,[2,37],{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV}),o($Vj,[2,32]),{27:[1,287]},{4:288,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{4:289,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},o($Vj,[2,117]),{79:[1,290]},{79:[1,291]},o($Vc1,$Va1,{6:[1,292],29:[1,293]}),{29:[1,294]},{30:[1,295],34:$V81},o($Vj,[2,94],{80:[1,296]}),o($Vj,[2,104]),{59:[1,297]},{23:[1,298],24:[1,299],27:[1,300]},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[1,301],60:$VV},{23:$VE,27:$VF,30:[1,302],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},o($Vb1,[2,39]),{22:$Vk,23:$Vl,24:$Vm,28:303,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{79:[1,304]},{79:[1,305]},o($Vj,[2,113]),o($Vj,[2,118]),o($Vj,[2,29]),{22:$Vk,23:$Vl,24:$Vm,28:306,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{22:$Vk,23:$Vl,24:$Vm,28:307,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{6:[1,308]},{78:[1,309],81:[1,310]},{78:[1,311]},{23:[1,312]},{24:[1,313]},{22:$Vk,23:$Vl,24:$Vm,28:314,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},{6:[1,315]},o($VX,$Vd1),{6:[1,316],23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},o($Vj,[2,112]),o($Vj,[2,116]),{23:$VE,27:$VF,30:[1,317],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{23:$VE,27:$VF,30:[1,318],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},o($Vj,[2,28]),{4:319,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},o($Vj,[2,96]),{4:320,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,19:$V1,20:17,21:18,22:$V2,24:$V3,25:21,65:$V4,72:$V5,73:$V6,74:$V7,75:$V8,76:$V9,77:$Va,90:$Vb,91:$Vc,94:$Vd,97:$Ve,98:$Vf,99:$Vg,100:$Vh},{59:[2,108]},{59:[2,109]},{23:$VE,27:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,59:[2,110],60:$VV},o($Vj,[2,111]),o($Vj,[2,33]),o($Vc1,$Vd1,{6:[1,321]}),{6:[1,322],29:[1,323]},{79:[1,324]},{79:[1,325]},o($Vj,[2,30]),o($Vj,[2,26]),{22:$Vk,23:$Vl,24:$Vm,28:326,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,62:$Vu,63:$Vv,64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,71:$VB},o($Vj,[2,95]),o($Vj,[2,105]),{23:$VE,27:$VF,30:[1,327],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,60:$VV},{6:[1,328]},o($Vj,[2,27])],
defaultActions: {36:[2,1],37:[2,2],147:[2,120],162:[2,124],163:[2,125],204:[2,126],247:[2,127],312:[2,108],313:[2,109]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	// const instruccionesAPI	= require('../').instruccionesAPI;
    var sintacticerror = "";
	var acumoftext="";
	const {Tree} = require('../Instructions/ASTGlobal/InstructionAST');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 72;
break;
case 6:return 65;
break;
case 7:return 73;
break;
case 8:return 74;
break;
case 9:return 75;
break;
case 10:return 54;
break;
case 11:return 53;
break;
case 12:return 56
break;
case 13:return 57
break;
case 14:return 23
break;
case 15:return 36
break;
case 16:return 37
break;
case 17:return 38
break;
case 18:return 40
break;
case 19:return 39
break;
case 20:return 46
break;
case 21:return 47
break;
case 22:return 41
break;
case 23:return 42
break;
case 24:return 43
break;
case 25:return 44
break;
case 26:return 'INTERROGA'
break;
case 27:return 61
break;
case 28:return 49
break;
case 29:return 50
break;
case 30:return 48
break;
case 31:return 58
break;
case 32:return 59
break;
case 33:return 6
break;
case 34:return 29
break;
case 35:return 30
break;
case 36:return 22
break;
case 37:return 34
break;
case 38:return 27
break;
case 39:return 74
break;
case 40:acumoftext=""; this.begin("CADENA");
break;
case 41:acumoftext+=yy_.yytext;
break;
case 42:acumoftext+='\n';
break;
case 43:acumoftext+='\t';
break;
case 44:acumoftext+='\r';
break;
case 45:acumoftext+='\"';
break;
case 46:acumoftext+='\'';
break;
case 47:acumoftext+='\\';
break;
case 48:yy_.yytext = acumoftext; this.popState(); return 55;
break;
case 49:return 'INC'
break;
case 50:return 'DEC'
break;
case 51:return 77
break;
case 52:return 80
break;
case 53:return 78
break;
case 54:return 79
break;
case 55:return 83
break;
case 56:return 87
break;
case 57:return 18
break;
case 58:return 89
break;
case 59:return 90
break;
case 60:return 94
break;
case 61:return 91
break;
case 62:return 31
break;
case 63:return 19
break;
case 64:return 100
break;
case 65:return 76
break;
case 66:return 97
break;
case 67:return 98
break;
case 68:return 62
break;
case 69:return 63
break;
case 70:return 64
break;
case 71:return 69
break;
case 72:return 66
break;
case 73:return 67
break;
case 74:return 71 
break;
case 75:return 99
break;
case 76:return 5;
break;
case 77: console.error('Este es un error lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						instruccionesAPI.getAST.setError(instruccionesAPI.errorlexico(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
						// instruccionesAPI.getErrores.getInstance().insertar(new ErrorList("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column)); 
						
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:(\/\*(\s*|.*?)*\*\/)|(\/\/.*))/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:[0-9](\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-z|A-Z]+[a-z|A-Z|0-9|"_"]+)/i,/^(?:,)/i,/^(?:=)/i,/^(?:('(([\\][\"]|[\\][\']|[\\][n]|[\\][t]|[\\][\\])|([^\n\'\"\\]{1}))'))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:\\")/i,/^(?:\\\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CADENA":{"rules":[41,42,43,44,45,46,47,48],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = myGrammar;
exports.Parser = myGrammar.Parser;
exports.parse = function () { return myGrammar.parse.apply(myGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}