/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var myGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,18],$V3=[1,20],$V4=[1,37],$V5=[1,25],$V6=[1,24],$V7=[1,26],$V8=[1,28],$V9=[1,27],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,33],$Ve=[1,32],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[5,18,22,23,25,32,33,38,40,43,44,45,46,47,51,52,53,84,89,90,91,92],$Vj=[2,77],$Vk=[1,53],$Vl=[1,66],$Vm=[1,65],$Vn=[1,63],$Vo=[1,64],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[18,28,31,55],$VD=[1,90],$VE=[1,108],$VF=[1,107],$VG=[1,109],$VH=[1,110],$VI=[1,111],$VJ=[1,112],$VK=[1,113],$VL=[1,114],$VM=[1,115],$VN=[1,116],$VO=[1,117],$VP=[1,118],$VQ=[1,119],$VR=[1,120],$VS=[1,121],$VT=[20,28,29,36,56,59,61,62,63,64,65,66,67,68,69,70,71,72,73,80],$VU=[2,95],$VV=[2,32],$VW=[28,36],$VX=[20,28,29,36,56,72,73,80],$VY=[20,28,29,36,56,59,61,66,67,68,69,70,71,72,73,80],$VZ=[20,28,29,36,56,66,67,68,69,70,71,72,73,80],$V_=[20,28,29,36,56,72,80],$V$=[1,230],$V01=[2,103],$V11=[59,61,62,63,64,65,66,67,68,69,70,71,72,73,80],$V21=[36,56],$V31=[2,104],$V41=[32,43,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"funciones":8,"metodos":9,"call":10,"instruccionswitch":11,"instruccionif":12,"instruccionwhile":13,"instruccionfor":14,"instrucciondowhile":15,"instruccionprint":16,"instruccionprintln":17,"VARIABLE":18,"INC":19,"PTCOMA":20,"DEC":21,"CONTINUE":22,"BREAK":23,"returns":24,"RUN":25,"PARIZQ":26,"parametros":27,"PARDER":28,"DOSPUNTOS":29,"tipo":30,"LLAIZQ":31,"LLADER":32,"VOID":33,"llamadas":34,"paramllamada":35,"COMA":36,"expresion":37,"IF":38,"ELSE":39,"SWITCH":40,"instruccioncaselist":41,"instrucciondefault":42,"CASE":43,"DEFAULT":44,"WHILE":45,"DO":46,"FOR":47,"fordeclarar":48,"actualizacion":49,"IGUAL":50,"PRINT":51,"PRINTLN":52,"RETURN":53,"notacioncomas":54,"CORIZQ":55,"CORDER":56,"NEW":57,"listavalores":58,"MENOS":59,"NOT":60,"MAS":61,"MULTIPLICACION":62,"DIVISION":63,"MODULO":64,"POTENCIA":65,"MENORIGUALQ":66,"MENORQUE":67,"MAYORIGUALQ":68,"MAYORQUE":69,"IGUALA":70,"DIFERENTE":71,"OR":72,"AND":73,"VENTERO":74,"VDOUBLE":75,"CADENA":76,"VCARACTER":77,"TRUE":78,"FALSE":79,"INTERROGA":80,"TOLOWER":81,"TOUPPER":82,"ROUND":83,"DOUBLE":84,"TYPEOF":85,"TOSTRING":86,"LENGTH":87,"TOCHARARRAY":88,"ENTERO":89,"BOOLEANO":90,"CARACTER":91,"STRING":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"VARIABLE",19:"INC",20:"PTCOMA",21:"DEC",22:"CONTINUE",23:"BREAK",25:"RUN",26:"PARIZQ",28:"PARDER",29:"DOSPUNTOS",31:"LLAIZQ",32:"LLADER",33:"VOID",36:"COMA",38:"IF",39:"ELSE",40:"SWITCH",43:"CASE",44:"DEFAULT",45:"WHILE",46:"DO",47:"FOR",50:"IGUAL",51:"PRINT",52:"PRINTLN",53:"RETURN",55:"CORIZQ",56:"CORDER",57:"NEW",59:"MENOS",60:"NOT",61:"MAS",62:"MULTIPLICACION",63:"DIVISION",64:"MODULO",65:"POTENCIA",66:"MENORIGUALQ",67:"MENORQUE",68:"MAYORIGUALQ",69:"MAYORQUE",70:"IGUALA",71:"DIFERENTE",72:"OR",73:"AND",74:"VENTERO",75:"VDOUBLE",76:"CADENA",77:"VCARACTER",78:"TRUE",79:"FALSE",80:"INTERROGA",81:"TOLOWER",82:"TOUPPER",83:"ROUND",84:"DOUBLE",85:"TYPEOF",86:"TOSTRING",87:"LENGTH",88:"TOCHARARRAY",89:"ENTERO",90:"BOOLEANO",91:"CARACTER",92:"STRING"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,3],[6,2],[6,2],[6,2],[6,2],[8,9],[8,8],[9,9],[9,7],[9,8],[9,6],[10,2],[34,4],[34,3],[35,3],[35,1],[27,4],[27,2],[12,7],[12,11],[12,9],[12,6],[11,8],[11,7],[11,7],[41,5],[41,4],[42,3],[13,7],[15,9],[14,11],[48,4],[48,3],[49,2],[49,2],[49,3],[16,5],[17,5],[24,2],[24,1],[7,3],[7,5],[7,3],[7,5],[7,11],[7,14],[7,9],[7,8],[7,11],[7,4],[7,4],[7,7],[7,10],[58,3],[58,1],[58,3],[58,1],[54,3],[54,1],[37,2],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,3],[37,4],[37,7],[37,5],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[37,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$ = [new InstructionAST($$[$0-1][0]), new nodoAST('ARBOL SINTACTICO',[$$[$0-1][1]])]; return this.$;  
break;
case 2:
 	var sintacticerror="Detectado error Sintactico se esperaba otro valor y se recibio: "+this.$+" reparelo.";
							console.log('Este es un error sintactico: ' +this.$ + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
							// instruccionesAPI.getAST.error.push(instruccionesAPI.errorsintactico(sintacticerror,this._$.first_line,this._$.first_column));
							arbolINSERRORES.setError(instruccionesAPI.errorsintactico(sintacticerror,this._$.first_line,this._$.first_column));
							return  arbolINSERRORES
							// return (instruccionesAPI.errorsintactico(sintacticerror,this._$.first_line,this._$.first_column));
						
break;
case 3: case 5:
 this.$ = [$$[$0-1][0], new nodoAST('INSTRUCCIONES',[$$[$0-1][1],$$[$0][1]])]; $$[$0-1][0].push($$[$0][0]);  
break;
case 4: case 6:
 this.$ = [ [$$[$0][0]] , new nodoAST('INSTRUCCIONES',[$$[$0][1]]) ];
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17:
 this.$ = [$$[$0][0], new nodoAST('INSTRUCCION',[$$[$0][1]])]; 
break;
case 18:
 this.$ = [new INSincredecre($$[$0-2], "INCREMENT", _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 19:
 this.$ = [new INSincredecre($$[$0-2], "DECREMENT", _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 20:
 this.$ = [new Continue("CONTINUE",_$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 21:
 this.$ = [new Break("BREAK",_$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('INSTRUCCION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 22:
 this.$ = [$$[$0-1][0],new nodoAST('INSTRUCCION',[$$[$0-1][1],new nodoAST($$[$0],null)])]; 
break;
case 23:
 this.$ = [$$[$0][0], new nodoAST('INSTRUCCION',[new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 24:
 this.$ = [new metodos($$[$0-8] ,$$[$0-6][0], $$[$0-3][0], $$[$0-1][0], _$[$0-8].first_line, _$[$0-8].first_column),new nodoAST('FUNCIONES',[new nodoAST($$[$0-8],null), new nodoAST($$[$0-7],null), $$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), $$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 25:
 this.$ = [new metodos($$[$0-7] ,null, $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column), new nodoAST('FUNCIONES',[new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), $$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null),])]; 
break;
case 26:
 this.$ = [new metodos($$[$0-8] ,$$[$0-6][0], null, $$[$0-1][0], _$[$0-8].first_line, _$[$0-8].first_column), new nodoAST('METODOS',[new nodoAST($$[$0-8],null), new nodoAST($$[$0-7],null), $$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null) ])] ; 
break;
case 27:
 this.$ = [new metodos($$[$0-6] ,$$[$0-4][0], null, $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('METODOS',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null),  $$[$0-1][1], new nodoAST($$[$0],null)		])] ; 
break;
case 28:
 this.$ = [new metodos($$[$0-7] ,null, null, $$[$0-1][0], _$[$0-7].first_line, _$[$0-7].first_column) , new nodoAST('METODOS',[new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null),  $$[$0-1][1], new nodoAST($$[$0],null) ])] ;  
break;
case 29:
 this.$ = [new metodos($$[$0-5] ,null, null, $$[$0-1][0], _$[$0-5].first_line, _$[$0-5].first_column) , new nodoAST('METODOS',[new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null),  $$[$0-1][1], new nodoAST($$[$0],null), ])] ;  
break;
case 30:
 this.$ = [$$[$0-1][0],new nodoAST('CALL',[$$[$0-1][1],new nodoAST($$[$0],null)])]; 
break;
case 31:
this.$ = [new llamar($$[$0-3], $$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('LLAMADAS',[new nodoAST($$[$0-3],null),new nodoAST($$[$0-2],null),$$[$0-1][1],new nodoAST($$[$0-2],null)])];
break;
case 32:
this.$ = [new llamar($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('LLAMADAS',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])];   
break;
case 33:
 this.$ = [$$[$0-2][0] , new nodoAST('PARAMETRO LLAMADA',[$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]]) ]; this.$.push($$[$0][0]); 
break;
case 34:
 this.$ = [[$$[$0][0]] , new nodoAST('PARAMETRO LLAMADA',$$[$0][1]) ] ; 
break;
case 35:
 this.$ = [ $$[$0-3][0], new nodoAST('PARAMETROS',[$$[$0-3][1],new nodoAST($$[$0-2],null),$$[$0-1][1],new nodoAST($$[$0],null)]) ]; this.$.push(new Declarar($$[$0-1][0], $$[$0], null,  _$[$0-3].first_line, _$[$0-3].first_column)); 
break;
case 36:
 this.$= [[new Declarar($$[$0-1][0], $$[$0], null,  _$[$0-1].first_line, _$[$0-1].first_column)] , new nodoAST('PARAMETROS',[$$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 37:
this.$ = [new If($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('INS IF',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null) ])]; 
break;
case 38:
this.$ = [new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column) , new nodoAST('INS IF',[new nodoAST($$[$0-10],null), new nodoAST($$[$0-9],null), $$[$0-8][1], new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), $$[$0-5][1], new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])];  
break;
case 39:
this.$ = [new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column), new nodoAST('INS IF',[new nodoAST($$[$0-8],null), new nodoAST($$[$0-7],null), $$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), $$[$0-3][1], new nodoAST($$[$0-2],null), new nodoAST($$[$0-1],null), $$[$0][1]])]; 
break;
case 41:
 this.$ = [new INSswitch($$[$0-5][0], $$[$0-2][0], $$[$0-1][0], _$[$0-7].first_line, _$[$0-7].first_column)  ,new nodoAST('INS SWITCH',[new nodoAST($$[$0-7],null), new nodoAST($$[$0-6],null), $$[$0-5][1], new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), $$[$0-2][1], $$[$0-1][1], new nodoAST($$[$0],null) ])]; 
break;
case 42:
 this.$ = [new INSswitch($$[$0-4][0], $$[$0-1][0], null, _$[$0-6].first_line, _$[$0-6].first_column),new nodoAST('INS SWITCH',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 43:
 this.$ = [new INSswitch($$[$0-4][0], null, $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column),new nodoAST('INS SWITCH',[new nodoAST($$[$0-6],null), new nodoAST($$[$0-5],null), $$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1],new nodoAST($$[$0],null)])]; 
break;
case 44:
 this.$ = [$$[$0-4][0],new nodoAST('CASE',[$$[$0-4][1], new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), $$[$0][1],]) ]; this.$.push(new INSCase($$[$0-2][0], $$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column)); 
break;
case 45:
 this.$ = [[new INSCase($$[$0-2][0], $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column)], new nodoAST('CASE',[new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), $$[$0][1]])]; 
break;
case 46:
 this.$ = [$$[$0][0], new nodoAST('DEFAULT', [new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])] 
break;
case 47:
this.$ = [new INSwhile($$[$0-4][0], $$[$0-1][0], _$[$0-6].first_line, _$[$0-6].first_column), new nodoAST('WHILE', [new nodoAST($$[$0-6],null),new nodoAST($$[$0-5],null),$$[$0-4][1],new nodoAST($$[$0-3],null),new  nodoAST($$[$0-2],null), $$[$0-1][1],new  nodoAST($$[$0],null),])];
break;
case 48:
this.$ = [new INSdowhile($$[$0-2][0], $$[$0-6][0], _$[$0-8].first_line, _$[$0-8].first_column), new nodoAST('DO WHILE', [new nodoAST($$[$0-8],null),new nodoAST($$[$0-7],null),$$[$0-6][1], new nodoAST($$[$0-5],null), new nodoAST($$[$0-4],null), new nodoAST($$[$0-3],null), $$[$0-2][1],new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])];
break;
case 49:
this.$ = [new INSfor(_$[$0-8][0], _$[$0-6][0], _$[$0-4][0], _$[$0-1][0],_$[$0-10].first_line, _$[$0-10].first_column), new nodoAST('FOR', [new nodoAST($$[$0-10],null),new nodoAST($$[$0-9],null),$$[$0-8][1],new  nodoAST($$[$0-7],null), $$[$0-6][1], new nodoAST($$[$0-5],null), $$[$0-4][1],new nodoAST($$[$0-3],null),new nodoAST($$[$0-2],null),$$[$0-1][1],new nodoAST($$[$0],null)])];
break;
case 50:
 this.$ = [new Declarar($$[$0-3][0], $$[$0-2], $$[$0][0],  _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('DECLARACION',[$$[$0-3][1],new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])];  
break;
case 51:
 this.$ = [new Asignar($$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('ASIGNACION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 52:
 this.$ = [new INSincredecre($$[$0-1], "INCREMENT", _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('ACTUALIZACION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 53:
 this.$ = [new INSincredecre($$[$0-1], "DECREMENT", _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('ACTUALIZACION',[new nodoAST($$[$0-1],null),new nodoAST($$[$0],null)])]; 
break;
case 54:
 this.$ = [new Asignar($$[$0-2], $$[$0][0], _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('ACTUALIZACION',[new nodoAST($$[$0-2],null),new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 55:
  this.$ = [new INSprint($$[$0-2][0], _$[$0-4].first_line, _$[$0-4].first_column, false),new nodoAST('PRINT',[new nodoAST($$[$0-4],null),new nodoAST($$[$0-3],null),$$[$0-2][1],new nodoAST($$[$0-1],null)])];   
break;
case 56:
 this.$ = [new INSprint($$[$0-2][0], _$[$0-4].first_line, _$[$0-4].first_column, true),new nodoAST('PRINT',[new nodoAST($$[$0-4],null),new nodoAST($$[$0-3],null),$$[$0-2][1],new nodoAST($$[$0-1],null)])]; 
break;
case 57:
 this.$ = [new INSreturn($$[$0][0],_$[$0-1].first_line, _$[$0-1].first_column)  , new nodoAST('RETURN',[new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 58:
 this.$ = [new INSreturn(null,_$[$0].first_line, _$[$0].first_column), new nodoAST('RETURN',new nodoAST($$[$0],null))]; 
break;
case 59:
 this.$ = [new Declarar($$[$0-2][0], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('DECLARACION',[$$[$0-2][1], new nodoAST($$[$0-1],null), new nodoAST($$[$0],null),])] ; 
break;
case 60:
 this.$ = [new Declarar($$[$0-4][0], $$[$0-3], $$[$0-1],  _$[$0-4].first_line, _$[$0-4].first_column)  , new nodoAST('DECLARACION',[$$[$0-4][1], new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null),])] ;
break;
case 61:
 this.$ = [new Declarar($$[$0-2][0], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('DECLARACION',[$$[$0-2][1], $$[$0-1][1], new nodoAST($$[$0],null),])] ; 
break;
case 62:
 this.$ = [new Declarar($$[$0-4][0], $$[$0-3], $$[$0-1],  _$[$0-4].first_line, _$[$0-4].first_column)  , new nodoAST('DECLARACION',[$$[$0-4][1], $$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null),])] ; 
break;
case 63: case 64: case 65: case 66: case 67: case 70: case 71: case 103: case 104: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114:
  
break;
case 68:
 this.$ = [new Asignar($$[$0-3][0], $$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column),new nodoAST('DECLARACION',[$$[$0-3][1], new nodoAST($$[$0-2],null), $$[$0-1][1], new nodoAST($$[$0],null)])];  
break;
case 69:
 this.$ = [new Asignar($$[$0-3][0], $$[$0-1][0], _$[$0-3].first_line, _$[$0-3].first_column),new nodoAST('DECLARACION',[new nodoAST($$[$0-3],null), new nodoAST($$[$0-2],null), $$[$0-1][1] ,new nodoAST($$[$0],null)])];  
break;
case 72: case 74:
 this.$ = [$$[$0-2][0],new nodoAST('LIST VALORES',[$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0-1][1]])] ; $$[$0-2][0].push($$[$0][0]);
break;
case 73: case 75:
 this.$ = [ [$$[$0][0]] , new nodoAST('LIST VALORES',[$$[$0][1]]) ];
break;
case 76:
 this.$=$$[$0-2]; this.$.push($$[$0]) 
break;
case 77:
 this.$=[]; this.$.push($$[$0]) 
break;
case 78:
 this.$ = [new INSAritmetico(null, $$[$0][0], 'UNITARIA',  _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 79:
 this.$ = [new INSLogico(null, $$[$0], 'NOT', _$[$0-1].first_line, _$[$0-1].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-1],null),$$[$0][1]])];
break;
case 80:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'SUMA',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 81:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'RESTA',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 82:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'MULTIPLICACION',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 83:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'DIVISION',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 84:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'MODULO',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 85:
 this.$ = [new INSAritmetico($$[$0-2][0], $$[$0][0], 'POTENCIA',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 86:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MENORIGUAL',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 87:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MENOR',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 88:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MAYORIGUAL',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 89:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'MAYOR',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 90:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'IGUAL',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 91:
 this.$ = [new INSRelacional($$[$0-2][0], $$[$0][0], 'NEGACION',  _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 92: case 93:
 this.$ = [new INSLogico($$[$0-2][0], $$[$0][0], 'NOT', _$[$0-2].first_line, _$[$0-2].first_column), new nodoAST('EXPRESION', [$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 94:
 this.$ = [new INSCastear($$[$0-2][0], $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column), new nodoAST('EXPRESION', [new nodoAST($$[$0-3],null),$$[$0-2][1],new nodoAST($$[$0-1],null),$$[$0][1]])]; 
break;
case 95:
 this.$ = [new id($$[$0], _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 96:
 this.$ = [new INSPrimitivos(Tipo.INT, Number($$[$0]), _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 97:
 this.$ = [new INSPrimitivos(Tipo.DOUBLE, Number($$[$0]), _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 98:
 this.$ = [new INSPrimitivos(Tipo.STRING, $$[$0], _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 99:
 this.$ = [new INSPrimitivos(Tipo.CARACTER, $$[$0], _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 100:
 this.$ = [new INSPrimitivos(Tipo.BOOLEAN, true, _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 101:
 this.$ = [new INSPrimitivos(Tipo.BOOLEAN, false, _$[$0].first_line, _$[$0].first_column), new nodoAST('EXPRESION', new nodoAST($$[$0],null))]; 
break;
case 102:
 this.$ = [$$[$0-1][0],new nodoAST('EXPRESION', [new nodoAST($$[$0-2],null),$$[$0-1][1], new nodoAST($$[$0],null)])]; 
break;
case 105:
  this.$ = [new INSTernario($$[$0-4][0], $$[$0-2][0], $$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column),new nodoAST('EXPRESION', [$$[$0-4][1], new nodoAST($$[$0-3],null), $$[$0-2][1], new nodoAST($$[$0-1],null), $$[$0][1]])]; 
break;
case 115:
 this.$= [$$[$0][0], new nodoAST('EXPRESION', [$$[$0][1]])]; 
break;
case 116:
 this.$ = [Tipo.INT, new nodoAST($$[$0],null)]; 
break;
case 117:
 this.$ = [Tipo.DOUBLE, new nodoAST($$[$0],null)]; 
break;
case 118:
 this.$ = [Tipo.BOOLEAN, new nodoAST($$[$0],null)]; 
break;
case 119:
 this.$ = [Tipo.CARACTER, new nodoAST($$[$0],null)]; 
break;
case 120:
 this.$ = [Tipo.STRING, new nodoAST($$[$0],null)]; 
break;
case 121:
 this.$ = [Tipo.VOID, new nodoAST($$[$0],null)]; 
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{1:[3]},{5:[1,38],6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{1:[2,2]},o($Vi,[2,4]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{19:[1,40],21:[1,41],26:[1,44],36:$Vj,50:[1,42],55:[1,43]},{20:[1,45]},{20:[1,46]},{20:[1,47]},{10:48,18:[1,49],34:23},{18:[1,50],54:51},{36:$Vk,50:[1,52]},{20:[1,54]},{26:[1,55]},{26:[1,56]},{26:[1,57]},{26:[1,58]},{31:[1,59]},{26:[1,60]},{26:[1,61]},{18:$Vl,20:[2,58],26:$Vm,34:80,37:62,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($VC,[2,116]),o($VC,[2,117]),o($VC,[2,118]),o($VC,[2,119]),o($VC,[2,120]),o([18,28,55],[2,121]),{1:[2,1]},o($Vi,[2,3]),{20:[1,81]},{20:[1,82]},{18:$Vl,26:$Vm,34:80,37:83,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:84,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,27:85,28:[1,86],30:88,33:$V4,34:80,35:87,37:89,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vd,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),{26:$VD},{20:[1,91],36:$Vj,50:[1,92],55:[1,93]},{20:[1,94],36:$Vk,50:[1,95]},{18:$Vl,26:$Vm,34:80,37:96,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:[1,97]},o($Vi,[2,30]),{18:$Vl,26:$Vm,34:80,37:98,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:99,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:100,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:[1,103],30:102,33:$V4,48:101,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:104,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:$Vl,26:$Vm,34:80,37:105,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:106,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{20:[2,57],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:122,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:123,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,30:124,33:$V4,34:80,37:125,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vd,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VT,$VU,{26:$VD,55:[1,126]}),o($VT,[2,96]),o($VT,[2,97]),o($VT,[2,98]),o($VT,[2,99]),o($VT,[2,100]),o($VT,[2,101]),{26:[1,127]},{26:[1,128]},{26:[1,129]},{26:[1,130]},{26:[1,131]},{26:[1,132]},{26:[1,133]},o($VT,[2,115]),o($Vi,[2,18]),o($Vi,[2,19]),{20:[1,134],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{56:[1,135],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,136],36:[1,137]},{20:$VV,29:[1,138],31:[1,139]},{28:[1,140],36:[1,141]},{18:[1,142]},o($VW,[2,34],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS}),{18:$Vl,26:$Vm,28:[1,143],34:80,35:87,37:89,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($Vi,[2,59]),{18:[1,145],26:$Vm,34:80,37:144,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{56:[1,146]},o($Vi,[2,61]),{18:$Vl,26:$Vm,34:80,37:147,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{20:[1,148],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},o([20,36,50],[2,76]),{28:[1,149],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,150],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,151],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{20:[1,152]},{18:[1,153]},{50:[1,154]},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,155],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{28:[1,156],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,157],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:158,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:159,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:160,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:161,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:162,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:163,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:164,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:165,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:166,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:167,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:168,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:169,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:170,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:171,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:172,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($VT,[2,78]),o($VX,[2,79],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP}),{28:[1,173]},{28:[1,174],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:175,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:176,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:177,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{84:[1,178]},{18:$Vl,26:$Vm,34:80,37:179,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:180,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:181,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:182,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($Vi,[2,69]),{50:[1,183],55:[1,184]},{29:[1,185],31:[1,186]},{30:187,33:$V4,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{30:188,33:[1,189],84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:190,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VT,[2,31]),{18:$Vl,26:$Vm,34:80,37:191,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($VW,[2,36]),o($VT,$VV),{20:[1,192],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},o([20,59,61,62,63,64,65,66,67,68,69,70,71,72,73,80],$VU,{26:$VD,55:[1,193]}),{50:[1,194]},{20:[1,195],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},o($Vi,[2,68]),{31:[1,196]},{31:[1,197]},{31:[1,198]},{18:$Vl,26:$Vm,34:80,37:199,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{50:[1,200]},{18:$Vl,26:$Vm,34:80,37:201,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{45:[1,202]},{20:[1,203]},{20:[1,204]},o($VY,[2,80],{62:$VG,63:$VH,64:$VI,65:$VJ}),o($VY,[2,81],{62:$VG,63:$VH,64:$VI,65:$VJ}),o($VT,[2,82]),o($VT,[2,83]),o($VT,[2,84]),o($VT,[2,85]),o($VZ,[2,86],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),o($VZ,[2,87],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),o($VZ,[2,88],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),o($VZ,[2,89],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),o($VZ,[2,90],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),o($VZ,[2,91],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),o($V_,[2,92],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VR}),o($VX,[2,93],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP}),{29:[1,205],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:206,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($VT,[2,102]),{56:[1,207],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,208],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,209],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,210]},{28:[1,211],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,212],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,213],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{28:[1,214],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:215,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:216,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{30:217,33:[1,218],84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:219,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:[1,220]},{31:[1,221]},{31:[1,222]},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,223],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VW,[2,33],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS}),o($Vi,[2,60]),{18:$Vl,26:$Vm,34:80,37:224,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{55:[1,226],57:[1,225]},o($Vi,[2,62]),{41:227,42:228,43:[1,229],44:$V$},{4:231,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,232],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:233,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{20:[1,234],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:235,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{20:[2,51],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{26:[1,236]},o($Vi,[2,55]),o($Vi,[2,56]),{18:$Vl,26:$Vm,34:80,37:237,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($V_,[2,94],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VR}),o($VT,$V01,{55:[1,238]}),o($VT,[2,106]),o($VT,[2,107]),o($VT,[2,108]),o($VT,[2,109]),o($VT,[2,110]),o($VT,[2,111]),o($VT,[2,114]),{20:[1,239],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{56:[1,240],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{31:[1,241]},{31:[1,242]},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,243],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VW,[2,35]),{4:244,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:245,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,29]),{56:[1,246],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{30:247,33:$V4,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:$Vl,26:$Vm,34:80,37:249,58:248,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{32:[1,251],42:250,43:[1,252],44:$V$},{32:[1,253]},{18:$Vl,26:$Vm,34:80,37:254,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{29:[1,255]},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,256],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,40]),{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,257],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:[1,259],49:258},{20:[2,50],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:260,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($V_,[2,105],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,73:$VR}),{18:$Vl,26:$Vm,34:80,37:261,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($Vi,[2,70]),{50:[1,262]},{4:263,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:264,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,27]),{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,265],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,266],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($V11,$V01,{20:[1,267],55:[1,268]}),{55:[1,269]},{36:[1,271],56:[1,270]},o($V21,[2,73],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS}),{32:[1,272]},o($Vi,[2,42]),{18:$Vl,26:$Vm,34:80,37:273,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($Vi,[2,43]),{29:[1,274],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{4:275,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,37],{39:[1,276]}),o($Vi,[2,47]),{28:[1,277]},{19:[1,278],21:[1,279],50:[1,280]},{28:[1,281],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{56:[1,282],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{18:$Vl,26:$Vm,34:80,37:283,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,284],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,285],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,25]),o($Vi,[2,28]),o($Vi,[2,66]),{18:$Vl,26:$Vm,34:80,37:286,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{18:$Vl,26:$Vm,34:80,37:287,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{20:[1,288]},{18:$Vl,26:$Vm,34:80,37:289,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($Vi,[2,41]),{29:[1,290],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{4:291,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[2,46],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{12:293,31:[1,292],38:$V5},{31:[1,294]},{28:[2,52]},{28:[2,53]},{18:$Vl,26:$Vm,34:80,37:295,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},{20:[1,296]},o($VT,$V31),{20:[1,297],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},o($Vi,[2,24]),o($Vi,[2,26]),{56:[1,298],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{56:[1,299],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},o($Vi,[2,65]),o($V21,[2,72],{59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS}),{4:300,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($V41,[2,45],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,24:19,30:21,54:22,34:23,6:39,18:$V0,22:$V1,23:$V2,25:$V3,33:$V4,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh}),{4:301,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,39]),{4:302,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{28:[2,54],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},o($Vi,[2,48]),o($Vi,[2,71]),o($V11,$V31,{20:[1,303]}),{20:[1,304],55:[1,305]},o($V41,[2,44],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,24:19,30:21,54:22,34:23,6:39,18:$V0,22:$V1,23:$V2,25:$V3,33:$V4,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh}),{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,306],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{6:39,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:$V0,22:$V1,23:$V2,24:19,25:$V3,30:21,32:[1,307],33:$V4,34:23,38:$V5,40:$V6,45:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,54:22,84:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,67]),o($Vi,[2,63]),{18:$Vl,26:$Vm,34:80,37:308,59:$Vn,60:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB},o($Vi,[2,38]),o($Vi,[2,49]),{56:[1,309],59:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ,73:$VR,80:$VS},{20:[1,310]},o($Vi,[2,64])],
defaultActions: {3:[2,2],38:[2,1],278:[2,52],279:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const {MiArbolAST} = require('../Instructions/ASTGlobal/InstructionAST');
	var {InstructionAST} = require('../Instructions/ASTGlobal/InstructionAST')
	var {nodoAST} = require('../Instructions/ASTGlobal/nodoAST')
	const instruccionesAPI	= require('../Interpreter/interprete').instruccionesAPI; //las instrucciones de la API
    const {INSprint} = require('../Instructions/INSprint');
    const {INSAritmetico} = require('../Instructions/INSAritmetico');
    const {INSRelacional} = require('../Instructions/INSRelacional');
    const {INSLogico} = require('../Instructions/INSLogico');
    const {Asignar} = require('../Instructions/Asignar');
    const {Declarar} = require('../Instructions/Declarar');
    const {INSCastear} = require('../Instructions/INSCastear');
    const {INSPrimitivos} = require('../Instructions/INSPrimitivos');
    const {id} = require('../Instructions/id');
    const {INSincredecre} = require('../Instructions/INSincredecre');
    const {INSreturn} = require('../Instructions/INSreturn');
    const {llamar} = require('../Instructions/llamar');
    const {metodos} = require('../Instructions/metodos');

	//SENTENCIAS
    const {INSif} = require('../Instructions/INSif');
    const {INSwhile} = require('../Instructions/INSwhile');
    const {INSdowhile} = require('../Instructions/INSdowhile');
    const {INSfor} = require('../Instructions/INSfor');
    const {INSswitch} = require('../Instructions/INSswitch');
	const {INSCase} = require('../Instructions/INSCase');
	//pauses
	const {Break} = require('../Instructions/Break');
	const {Continue} = require('../Instructions/Continue');
	const Tipo = require("../Instructions/ASTGlobal/tiponodo");
	const tipos = require("../Instructions/ASTGlobal/tiponodo");
	var sintacticerror = "";
	var acumoftext="";
	var arbolINSERRORES = new InstructionAST();//por si hay errores
	//PARA MI AST
	// var arbol = new MiArbolAST();
	// var MiArbolAST = new InstructionAST();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:acumoftext=""; this.begin("CADENA");
break;
case 6:acumoftext+=yy_.yytext;
break;
case 7:acumoftext+='\n';
break;
case 8:acumoftext+='\t';
break;
case 9:acumoftext+='\r';
break;
case 10:acumoftext+='\"';
break;
case 11:acumoftext+='\'';
break;
case 12:acumoftext+='\\';
break;
case 13:yy_.yytext = acumoftext; this.popState(); return 76;
break;
case 14:return 89;
break;
case 15:return 84;
break;
case 16:return 90;
break;
case 17:return 91;
break;
case 18:return 33
break;
case 19:return 92;
break;
case 20:return 78
break;
case 21:return 79
break;
case 22:return 57
break;
case 23:return 19
break;
case 24:return 21
break;
case 25:return 61
break;
case 26:return 59
break;
case 27:return 62
break;
case 28:return 63
break;
case 29:return 65
break;
case 30:return 64
break;
case 31:return 70
break;
case 32:return 71
break;
case 33:return 66
break;
case 34:return 67
break;
case 35:return 68
break;
case 36:return 69
break;
case 37:return 50
break;
case 38:return 20
break;
case 39:return 80
break;
case 40:return 29
break;
case 41:return 36
break;
case 42:return 72
break;
case 43:return 73
break;
case 44:return 60
break;
case 45:return 26
break;
case 46:return 28
break;
case 47:return 31
break;
case 48:return 32
break;
case 49:return 55
break;
case 50:return 56
break;
case 51:return 38
break;
case 52:return 39
break;
case 53:return 40
break;
case 54:return 43
break;
case 55:return 23
break;
case 56:return 44
break;
case 57:return 45
break;
case 58:return 46
break;
case 59:return 47
break;
case 60:return 22
break;
case 61:return 53
break;
case 62:return 51
break;
case 63:return 52
break;
case 64:return 81
break;
case 65:return 82
break;
case 66:return 83
break;
case 67:return 87
break;
case 68:return 85
break;
case 69:return 86
break;
case 70:return 88 
break;
case 71:return 25
break;
case 72:return 75;
break;
case 73:return 74;
break;
case 74:return 18
break;
case 75:return 77
break;
case 76:return 5;
break;
case 77: 	console.log('Este es un error lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
		// instruccionesAPI.getAST.error.push(instruccionesAPI.errorlexico(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
		arbolINSERRORES.setError(instruccionesAPI.errorlexico(yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
		// instruccionesAPI.getErrores.getInstance().insertar(new ErrorList("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column)); 
	
break;
}
},
rules: [/^(?:\n)/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:(\/\*(\s*|.*?)*\*\/)|(\/\/.*))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:\\")/i,/^(?:\\\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:Int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:;)/i,/^(?:\?)/i,/^(?::)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-z|A-Z])[a-z|A-Z|0-9|"_"]*)/i,/^(?:('(([\\][\"]|[\\][\']|[\\][n]|[\\][t]|[\\][\\])|([^\n\'\"\\]{1}))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CADENA":{"rules":[6,7,8,9,10,11,12,13],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = myGrammar;
exports.Parser = myGrammar.Parser;
exports.parse = function () { return myGrammar.parse.apply(myGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}