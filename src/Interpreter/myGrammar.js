/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var myGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,7],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,22],$V7=[1,31],$V8=[1,30],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[5,80],$Vl=[2,5,8,9,20,21,22,26,66,73,74,75,76,77,78,80,89,90,93,96,97,98],$Vm=[1,53],$Vn=[1,45],$Vo=[1,54],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[1,62],$VE=[26,29,53,79],$VF=[1,88],$VG=[1,78],$VH=[1,77],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[1,86],$VQ=[1,87],$VR=[1,89],$VS=[1,90],$VT=[1,91],$VU=[1,92],$VV=[1,93],$VW=[1,94],$VX=[1,96],$VY=[17,28,30,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,60,61,62],$VZ=[2,63],$V_=[1,101],$V$=[1,100],$V01=[1,99],$V11=[1,114],$V21=[17,30,34,36,37,43,44,45,47,48,49,50,51,53,60,62],$V31=[1,166],$V41=[1,165],$V51=[17,28],$V61=[34,60],$V71=[17,30,34,53,60,62],$V81=[17,30,34,43,44,45,47,48,49,50,51,53,60,62],$V91=[1,211],$Va1=[1,213],$Vb1=[17,30,34,50,51,53,60,62],$Vc1=[2,71],$Vd1=[30,34,53,60],$Ve1=[28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,61],$Vf1=[2,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"casteos":8,"vectores":9,"if":10,"while":11,"for":12,"dowhile":13,"funciones":14,"metodos":15,"llamadas":16,"PTCOMA":17,"print":18,"println":19,"BREAK":20,"CONTINUE":21,"RETURN":22,"expresion":23,"run":24,"tipo":25,"VARIABLE":26,"notacioncomas":27,"IGUAL":28,"CORIZQ":29,"CORDER":30,"NEW":31,"listavalores":32,"notacioncomas2":33,"COMA":34,"listavalores2":35,"MENOS":36,"MAS":37,"POR":38,"DIVIDIDO":39,"MOD":40,"POT":41,"MENORIGUALQ":42,"MENORQUE":43,"MAYORIGUALQ":44,"MAYORQUE":45,"IGUALQUE":46,"IGUALA":47,"DIFERENTE":48,"NOT":49,"OR":50,"AND":51,"PARA":52,"PARC":53,"VENTERO":54,"VDOUBLE":55,"CADENA":56,"TRUE":57,"FALSE":58,"PARIZQ":59,"PARDER":60,"INTERROGACION":61,"DOSPUNTOS":62,"TOLOWER":63,"TOUPPER":64,"ROUND":65,"DOUBLE":66,"TYPEOF":67,"TOSTRING":68,"llamar":69,"LENGTH":70,"valor":71,"TOCHARARRAY":72,"ENTERO":73,"BOOLEANO":74,"CARACTER":75,"STRING":76,"VOID":77,"IF":78,"LLAIZQ":79,"LLADER":80,"ELSE":81,"switch":82,"SWITCH":83,"caselist":84,"default":85,"caseList":86,"CASE":87,"DEFAULT":88,"WHILE":89,"FOR":90,"fordeclarar":91,"actualizacion":92,"DO":93,"parametros":94,"paramllamada":95,"PRINT":96,"PRINTLN":97,"RUN":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"casteos",9:"vectores",17:"PTCOMA",20:"BREAK",21:"CONTINUE",22:"RETURN",26:"VARIABLE",28:"IGUAL",29:"CORIZQ",30:"CORDER",31:"NEW",34:"COMA",36:"MENOS",37:"MAS",38:"POR",39:"DIVIDIDO",40:"MOD",41:"POT",42:"MENORIGUALQ",43:"MENORQUE",44:"MAYORIGUALQ",45:"MAYORQUE",46:"IGUALQUE",47:"IGUALA",48:"DIFERENTE",49:"NOT",50:"OR",51:"AND",52:"PARA",53:"PARC",54:"VENTERO",55:"VDOUBLE",56:"CADENA",57:"TRUE",58:"FALSE",59:"PARIZQ",60:"PARDER",61:"INTERROGACION",62:"DOSPUNTOS",63:"TOLOWER",64:"TOUPPER",65:"ROUND",66:"DOUBLE",67:"TYPEOF",68:"TOSTRING",69:"llamar",70:"LENGTH",72:"TOCHARARRAY",73:"ENTERO",74:"BOOLEANO",75:"CARACTER",76:"STRING",77:"VOID",78:"IF",79:"LLAIZQ",80:"LLADER",81:"ELSE",83:"SWITCH",86:"caseList",87:"CASE",88:"DEFAULT",89:"WHILE",90:"FOR",93:"DO",96:"PRINT",97:"PRINTLN",98:"RUN"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,3],[6,2],[6,2],[7,3],[7,3],[7,5],[7,5],[7,11],[7,14],[7,9],[7,8],[7,11],[7,4],[7,7],[7,10],[27,2],[33,3],[32,2],[32,3],[32,1],[35,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,4],[23,3],[23,3],[23,4],[23,3],[23,3],[23,4],[23,3],[23,3],[23,4],[23,4],[23,4],[23,4],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,4],[23,7],[23,3],[23,5],[23,4],[23,4],[23,4],[23,4],[23,4],[23,1],[23,4],[23,4],[23,4],[23,4],[71,1],[71,1],[71,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[10,7],[10,11],[10,9],[10,6],[82,8],[82,7],[82,7],[84,5],[84,4],[85,3],[11,7],[12,11],[91,4],[91,3],[92,3],[92,3],[92,3],[13,9],[14,9],[14,8],[94,4],[94,2],[15,9],[15,7],[15,8],[15,6],[16,4],[16,3],[95,3],[95,1],[18,4],[19,4],[24,4],[24,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 63: case 64: case 65: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 106: case 107: case 108: case 109: case 110: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 122: case 123: case 124: case 125: case 126: case 127:
  
break;
case 40:
 this.$ = $$[$0] *-1; 
break;
case 41:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 42:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 43:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 44:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 61: case 62:
 this.$ = Number($$[$0]); 
break;
case 66:
 this.$ = $$[$0-1]; 
break;
case 104:
this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 120: case 121:
   
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{1:[3]},{5:[1,36]},o($Vk,[2,3],{6:3,7:5,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,24:20,25:21,4:37,2:$V0,8:$V1,9:$V2,20:$V3,21:$V4,22:$V5,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj}),o($Vk,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),{17:[1,38]},{17:[1,39]},{17:[1,40]},{17:[1,41]},{17:[1,42]},{17:[1,44],23:43,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{17:[1,63]},{26:[1,64],27:65},{28:[1,66],29:[1,67],59:[1,68]},{59:[1,69]},{59:[1,70]},{59:[1,71]},{79:[1,72]},{59:[1,73]},{59:[1,74]},{26:[1,75]},o($VE,[2,88]),o($VE,[2,89]),o($VE,[2,90]),o($VE,[2,91]),o($VE,[2,92]),o([26,29,53],[2,93]),{1:[2,1]},o($Vk,[2,2]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),{17:[1,76],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},o($Vl,[2,20]),{23:95,26:$Vm,36:$VX,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{25:97,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc},o($VY,[2,61]),o($VY,[2,62]),o($VY,$VZ),o($VY,[2,64]),o($VY,[2,65]),{23:98,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{29:$V_,36:$V$,37:$V01},{37:[1,102]},{59:[1,103]},{59:[1,104]},{59:[1,105]},{59:[1,106]},{59:[1,107]},o($VY,[2,80]),{59:[1,108]},{59:[1,109]},o($Vl,[2,21]),{17:[1,110],28:[1,111],29:[1,112],33:113,34:$V11},{17:[1,115],28:[1,116]},{23:117,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:118,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:123,25:122,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,60:[1,120],63:$Vw,64:$Vx,65:$Vy,66:$V7,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,94:119,95:121},{23:124,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:125,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{25:127,26:[1,128],66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,91:126},{2:$V0,4:129,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{23:130,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:131,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{52:[1,132]},o($Vl,[2,19]),{23:133,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:134,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:135,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:136,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:137,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:138,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:139,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:141,26:$Vm,28:[1,140],36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:142,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:144,26:$Vm,28:[1,143],36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:145,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{28:[1,146]},{23:147,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:148,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{28:[1,149]},{50:[1,150]},{51:[1,151]},{23:152,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($V21,[2,40],{28:$VF,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),{23:95,26:[1,153],36:$VX,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{53:[1,154]},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,155],61:$VW},{37:[1,156]},{36:[1,157]},{23:158,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{26:[1,159]},{23:160,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:161,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{66:[1,162]},{23:163,26:$V31,32:167,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$V41,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:164,72:$VD},{23:168,26:$V31,32:167,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$V41,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:169,72:$VD},{23:171,26:$V31,32:167,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$V41,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:170,72:$VD},{23:171,26:$V31,32:167,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$V41,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:172,72:$VD},o($Vl,[2,22]),{23:173,26:[1,174],36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{30:[1,175]},o($V51,[2,34]),{26:[1,176]},o($Vl,[2,23]),{23:177,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{17:[1,178],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{28:$VF,30:[1,179],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{34:[1,181],60:[1,180]},{17:[2,121],62:[1,182],79:[1,183]},{34:[1,185],60:[1,184]},{26:[1,186]},o($V61,[2,123],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,187],61:$VW},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,188],61:$VW},{17:[1,189]},{26:[1,190]},{28:[1,191]},{80:[1,192]},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,193],61:$VW},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,194],61:$VW},{23:171,26:$Vm,32:196,36:$Vn,37:$Vo,52:$Vp,53:[1,195],54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($V21,[2,41],{28:$VF,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),o($V21,[2,42],{28:$VF,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),o($V71,[2,43],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),o($V71,[2,44],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),o($V71,[2,45],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),o($V71,[2,46],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),o($V71,[2,47],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),{23:197,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($V81,[2,49],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),o($V81,[2,50],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),{23:198,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($V81,[2,52],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),o($V71,[2,53],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),{23:199,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($V81,[2,55],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),o($V81,[2,56],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),{23:200,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:201,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:202,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW,62:[1,203]},o($VY,[2,70],{29:$V_}),{23:204,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,69]),{28:$VF,30:[1,205],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},o($VY,[2,68]),{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,206],61:$VW},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,207],61:$VW},{60:[1,208]},{28:$VF,34:$V91,35:210,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,209],61:$VW},{60:[1,212]},o([28,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61],$VZ),{29:$V_,36:$V$,37:$V01,60:[2,87]},{34:$Va1,60:[2,85]},{28:$VF,34:$V91,35:210,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,214],61:$VW},{60:[1,215]},{60:[1,216]},o([30,53,60],[2,38],{35:210,28:$VF,34:$V91,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),{60:[1,217]},{17:[1,218],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{29:[1,219],36:$V$,37:$V01},{28:[1,220]},{33:221,34:$V11},{17:[1,222],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},o($Vl,[2,31]),{28:[1,223],29:[1,224]},{62:[1,225],79:[1,226]},{25:227,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc},{25:228,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:[1,229]},{2:$V0,4:230,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{17:[2,120]},{23:231,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($V61,[2,115]),{79:[1,232]},{79:[1,233]},{23:234,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{28:[1,235]},{23:236,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{89:[1,237]},{17:[2,124]},{17:[2,125]},{17:[2,126]},{34:$Va1,53:[1,238]},o($V81,[2,48],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),o($V81,[2,51],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,46:$VQ,61:$VW}),o($V71,[2,54],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),o($Vb1,[2,57],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,61:$VW}),o([17,30,34,50,53,60,62],[2,58],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,51:$VV,61:$VW}),o($Vb1,[2,59],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,61:$VW}),{23:239,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($V71,[2,60],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),o($VY,$Vc1,{29:[1,240]}),o($VY,[2,75]),o($VY,[2,76]),o($VY,[2,77]),o($VY,[2,78]),o($Vd1,[2,36]),{23:241,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($VY,[2,82]),{23:242,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($VY,[2,79]),o($VY,[2,83]),o($VY,[2,81]),o($VY,[2,84]),o($Vl,[2,24]),{23:243,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{29:[1,245],31:[1,244]},o($V51,[2,35]),o($Vl,[2,25]),{23:246,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:247,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{25:248,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:[1,249]},{2:$V0,4:250,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{26:[1,251]},{79:[1,252]},{79:[1,253]},{80:[1,254]},o($V61,[2,122],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),{2:$V0,4:255,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,80:[1,256],89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{2:$V0,4:257,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{17:[1,258],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{23:259,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{17:[2,107],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{59:[1,260]},{17:[2,127]},o($V71,[2,74],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),{23:261,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{28:$VF,34:$V91,35:262,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},o($Vd1,[2,37],{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW}),{28:$VF,30:[1,263],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{25:264,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc},{23:171,26:$Vm,32:265,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{17:[1,266],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{28:$VF,30:[1,267],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{79:[1,268]},{79:[1,269]},{80:[1,270]},o($V61,[2,114]),{2:$V0,4:271,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{2:$V0,4:272,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},o($Vl,[2,119]),{80:[1,273]},o($Vl,[2,97]),{80:[1,274]},{26:[1,276],92:275},{17:[2,106],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{23:277,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{28:$VF,30:[1,278],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},o($Vd1,[2,39]),o($Ve1,$Vc1,{17:[1,279],29:[1,280]}),{29:[1,281]},{30:[1,282],34:$Va1},o($Vl,[2,32]),{28:[1,283]},{2:$V0,4:284,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{2:$V0,4:285,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},o($Vl,[2,117]),{80:[1,286]},{80:[1,287]},o($Vl,[2,94],{81:[1,288]}),o($Vl,[2,104]),{60:[1,289]},{28:[1,292],36:[1,291],37:[1,290]},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[1,293],61:$VW},o($VY,$Vf1),o($Vl,[2,29]),{23:294,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{23:295,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{17:[1,296]},{23:297,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{80:[1,298]},{80:[1,299]},o($Vl,[2,113]),o($Vl,[2,118]),{10:301,78:$Vd,79:[1,300]},{79:[1,302]},{37:[1,303]},{36:[1,304]},{23:305,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},{17:[1,306]},{28:$VF,30:[1,307],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{28:$VF,30:[1,308],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},o($Vl,[2,28]),{17:[1,309],28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},o($Vl,[2,112]),o($Vl,[2,116]),{2:$V0,4:310,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},o($Vl,[2,96]),{2:$V0,4:311,6:3,7:5,8:$V1,9:$V2,10:8,11:9,12:10,13:11,14:12,15:13,16:14,18:15,19:16,20:$V3,21:$V4,22:$V5,24:20,25:21,26:$V6,66:$V7,73:$V8,74:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd,89:$Ve,90:$Vf,93:$Vg,96:$Vh,97:$Vi,98:$Vj},{60:[2,108]},{60:[2,109]},{28:$VF,36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,60:[2,110],61:$VW},o($Vl,[2,111]),o($Ve1,$Vf1,{17:[1,312]}),{17:[1,313],29:[1,314]},o($Vl,[2,33]),{80:[1,315]},{80:[1,316]},o($Vl,[2,30]),o($Vl,[2,26]),{23:317,26:$Vm,36:$Vn,37:$Vo,52:$Vp,54:$Vq,55:$Vr,56:$Vs,57:$Vt,58:$Vu,59:$Vv,63:$Vw,64:$Vx,65:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,72:$VD},o($Vl,[2,95]),o($Vl,[2,105]),{28:$VF,30:[1,318],36:$VG,37:$VH,38:$VI,39:$VJ,40:$VK,41:$VL,42:$VM,43:$VN,44:$VO,45:$VP,46:$VQ,47:$VR,48:$VS,49:$VT,50:$VU,51:$VV,61:$VW},{17:[1,319]},o($Vl,[2,27])],
defaultActions: {36:[2,1],184:[2,120],193:[2,124],194:[2,125],195:[2,126],238:[2,127],303:[2,108],304:[2,109]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const instruccionesAPI	= require('./Interpreter').instruccionesAPI;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 73;
break;
case 6:return 66;
break;
case 7:return 74;
break;
case 8:return 75;
break;
case 9:return 76;
break;
case 10:return 54;
break;
case 11:return 55;
break;
case 12:return 57
break;
case 13:return 58
break;
case 14:return 37
break;
case 15:return 'RESTA'
break;
case 16:return 'MULTIPLICACION'
break;
case 17:return 'DIVISION'
break;
case 18:return 'POTENCIA'
break;
case 19:return 'MODULO'
break;
case 20:return 47
break;
case 21:return 48
break;
case 22:return 42
break;
case 23:return 43
break;
case 24:return 44
break;
case 25:return 45
break;
case 26:return 'INTERROGA'
break;
case 27:return 62
break;
case 28:return 50
break;
case 29:return 51
break;
case 30:return 49
break;
case 31:return 59
break;
case 32:return 60
break;
case 33:return 'PTOCOMA'
break;
case 34:return 29
break;
case 35:return 30
break;
case 36:return 26
break;
case 37:return 34
break;
case 38:return 28
break;
case 39:return 75
break;
case 40:acumoftext=""; this.begin("CADENA");
break;
case 41:acumoftext+=yy_.yytext;
break;
case 42:acumoftext+='\n';
break;
case 43:acumoftext+='\t';
break;
case 44:acumoftext+='\r';
break;
case 45:acumoftext+='\"';
break;
case 46:acumoftext+='\'';
break;
case 47:acumoftext+='\\';
break;
case 48:yy_.yytext = acumoftext; this.popState(); return 56;
break;
case 49:return 'INC'
break;
case 50:return 'DEC'
break;
case 51:return 78
break;
case 52:return 81
break;
case 53:return 79
break;
case 54:return 80
break;
case 55:return 83
break;
case 56:return 87
break;
case 57:return 20
break;
case 58:return 88
break;
case 59:return 89
break;
case 60:return 93
break;
case 61:return 90
break;
case 62:return 31
break;
case 63:return 21
break;
case 64:return 22
break;
case 65:return 77
break;
case 66:return 96
break;
case 67:return 97
break;
case 68:return 63
break;
case 69:return 64
break;
case 70:return 65
break;
case 71:return 70
break;
case 72:return 67
break;
case 73:return 68
break;
case 74:return 72
break;
case 75:return 98
break;
case 76:return 5;
break;
case 77: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/i,/^(?:(\/\*(\s*|.*?)*\*\/)|(\/\/.*))/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[a-z|A-Z]+[a-z|A-Z|0-9|"_"]+)/i,/^(?:,)/i,/^(?:=)/i,/^(?:('(([\\][\"]|[\\][\']|[\\][n]|[\\][t]|[\\][\\])|([^\n\'\"\\]{1}))'))/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\r)/i,/^(?:\\")/i,/^(?:\\\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:new\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CADENA":{"rules":[41,42,43,44,45,46,47,48],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = myGrammar;
exports.Parser = myGrammar.Parser;
exports.parse = function () { return myGrammar.parse.apply(myGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}